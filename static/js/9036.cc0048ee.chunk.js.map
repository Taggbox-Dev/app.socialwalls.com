{"version":3,"file":"static/js/9036.cc0048ee.chunk.js","mappings":"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","sources":["app/Layouts/Main/Analytics/layout/common/connectButton.js","app/Layouts/Main/Analytics/layout/skeleton/popupListSkeleton.js","app/Layouts/Main/Analytics/layout/popup/postPopup.js"],"sourcesContent":["import { Button } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"../../../../../CommonComponents/AssetsHelper\";\n\n    const ConnectButton = (props) => {\n\n        return ![29].includes(props.network) ? (\n        <>\n        <div className=\"conn_status_wrap text-end\">\n            <Button variant=\"primary\" onClick={() => window.open(props.link)} type=\"button\" className={`btn-min-w text-nowrap ${props.btnClass}`}>\n                <FontAwesomeIcon type={'brands'} icon={'rocketchat'} iconClass={'text-white fs-6 me-1'} /> Connect\n            </Button>\n        </div>\n        </>\n    ) : null;\n    };\n\n    export default ConnectButton;\n","import React from \"react\";\n\nconst List = () => {\n  return (\n    <div className=\"d-flex justify-content-between mb-4\">\n      <p className=\"sk_line sk_line_height_10 sk_line_30 m-0\"></p>\n      <p className=\"sk_line sk_line_height_10 sk_line_30 m-0\"></p>\n    </div>  \n  );\n};\n\nconst PopupListSkeleton = () => {\n  return [1, 2, 3, 4].map(() => {\n    return (\n      <div className=\"card mb-3 p-3\">\n        <div className=\"row \">\n          <div className=\"col-lg-2\">\n            <div className=\"sk_line sk_img_thumb rounded-0 w-100 m-0 me-5\"></div>\n          </div>\n          <div className=\"col-lg-10\">\n            <div className=\"d-flex flex-grow-1 w-100 mb-8 justify-content-between align-items-center\">\n              <div className=\"d-flex align-items-center w-100\">\n                <div className=\"d-flex align-items-center w-50 m_grid_author\">\n                  <div className=\"sk_line sk_img m-0 me-3\"></div>\n                  <div className=\"w-50\">\n                    <h3 className=\"sk_line sk_line_height_16 sk_line_90 m-0 mb-3\"></h3>\n                    <p className=\"sk_line sk_line_height_10 sk_line_60 m-0\"></p>\n                  </div>\n                </div>\n                <div className=\"sk_line sk_line_10 sk_line_height_16 m-0\"></div>\n              </div>\n              <div className=\"sk_line sk_line_10 sk_line_height_16 m-0\"></div>\n            </div>\n\n            <h6 className=\"sk_line sk_line_height_10 sk_line_100 m-0 mb-3\"></h6>\n            <p className=\"sk_line sk_line_height_10 sk_line_20 m-0 mb-5\"></p>\n            <div className=\"row mt-lg-0 mt-2\">\n              <div className=\"col-sm-6\">\n                <List/>\n                <List/>\n                <List/>\n                <List/>\n              </div>\n              <div className=\"col-sm-6\">\n                <List/>\n                <List/>\n                <List/>\n                <List/>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  });\n};\n\nexport default React.memo(PopupListSkeleton);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\nimport { dateFormat } from \"../../utils\"; \nimport { paginate } from '../../../../../CommonComponents/Paginate'; \nimport Paggination from \"../common/popup/paggination\";\nimport PopupSearch from \"../common/popup/popupSearch\";\nimport ConnectButton from \"../common/connectButton\";\nimport PopupListSkeleton from \"../skeleton/popupListSkeleton\";\nimport { kFormatter } from \"../../../../../../utils\";\nimport PostMedia from \"../common/postMedia\";\nimport NetworkIcon from \"../common/networkIcon\";\nimport AuthorInfo from \"../../content/components/authorInfo\";\nimport Sentiment from \"../../../Dashboard/components/common/sentiment\";\nimport DataNotFound from \"../common/DataNotFound\";\n\nclass PostPopup extends Component {\n  state = {\n    fetchRecord: null,\n    isLoading: true,\n    total: 0,\n    limit: 10,\n    offset: 0,\n    paginateData: {},\n    currentPage: 1,\n    maxPage: 10,\n    username: null\n  }\n\n  componentDidMount() {\n     const { total } = this.props;\n     const { limit, currentPage, maxPage } = this.state;\n      if (total) {\n        this.setState({ total: total, paginateData: paginate(total, currentPage, limit, maxPage) }, () => this.onLoadFilterData())\n      }\n   }\n\n\n  onLoadFilterData = (isSearch=0) => { \n    \n    const { analyticwall, total, moreData } = this.props;\n    const { selectedWallFeed, dateFilter, selectedFeed } = analyticwall;\n    const { currentPage, limit, offset, username, maxPage } = this.state;\n\n    let wallData = selectedWallFeed?.wall?.id;\n    let startDate = dateFilter.startDate;\n    let endDate = dateFilter.endDate;\n\n    let feedIDs = [];\n    if (selectedFeed && selectedFeed.length > 0) {\n      selectedFeed.map((fItem) => {\n        feedIDs.push(fItem.value);\n      })\n    }\n\n    this.setState({ isLoading: true })\n\n      // type Popup module\n       moreData(wallData, dateFormat(startDate), dateFormat(endDate), feedIDs.join(), isSearch ? username && username.length > 0 ? total : limit  :  offset, isSearch ? username.length > 0 ? 0 : offset : limit, 0, username)\n      .then((response) => {\n  \n        const { responseData } = response.data;\n\n        if(!isSearch) this.setState({ fetchRecord: responseData.postData, isLoading: false })\n          else\n        this.setState({ total: responseData.totalCount, paginateData: paginate(responseData.totalCount, currentPage, limit, maxPage), fetchRecord: responseData.postData, isLoading: false })\n    })\n      .catch((error) => {\n        console.error(\"LAYOUT ISSUE\", error)\n      });\n   }   \n\n\n  managePagging=(pageClick,currentPage=0,total=0,page=0,limit=0,maxPage=0,offset=0)=>{\n      if(pageClick==1)\n          this.setState({ currentPage: currentPage });\n          else if(pageClick==2)\n          this.setState(\n            { paginateData: paginate(total, page, limit, maxPage), offset: offset },\n            () => this.onLoadFilterData()\n        );\n         else if(pageClick==3)\n          this.setState(\n            {\n                currentPage: page,\n                paginateData: paginate(total, page, limit, maxPage),\n                offset: offset,\n            },\n            () => this.onLoadFilterData()\n            );\n        else if(pageClick==4)\n        this.setState(\n          {\n              limit: limit,\n              paginateData: paginate(total, currentPage, limit, maxPage),\n              offset: offset,\n          },\n          () => this.onLoadFilterData()\n        );\n     }\n\n\n  updateSearchText = (value) => {\n    this.setState({ username: value, currentPage: 1 }, () => this.onLoadFilterData(1))\n  }\n  \n  render() {\n    const {  analyticsStatus, isPdfDownloading, maxPage  } = this.props;\n    const { isLoading, fetchRecord, total, limit, paginateData, currentPage } = this.state;\n\n\n    return (\n      <div className=\"influential_contributors_custom_modal px-5\">\n        <PopupSearch isPdfDownloading={isPdfDownloading} analyticsStatus={analyticsStatus} updateSearchText={this.updateSearchText}/>\n        <div className=\"influential-data-list sw_theme \">\n          {\n            isLoading ? <PopupListSkeleton /> : (fetchRecord && fetchRecord.length > 0) ? fetchRecord.map((item, mIndex) => <div className=\"card mb-3\">\n            <div className=\"p-3 users_row\">\n              <div className=\"row align-items-start\">\n \n              {![1].includes(item.type) ?\n                  <div className=\"col-lg-2\">\n                    <div className=\"symbol_item position-relative\">\n                        <div className=\"symbol symbol-170 symbol-2by2 flex-shrink-0\">\n                            <Button type=\"button\" className=\"border-0 p-0 bg-transparent rounded\">\n                             <PostMedia\n                                mediaType={item.type }\n                                postFile={item.postFile}\n                                postId={\"postPrimaryId\"}\n                                className={\"img-fluid symbol-label no-repeat-fit-background rounded\"}\n                              />\n                            </Button>\n                        </div>\n                    </div>\n                  </div> : null }\n\n                  <div className={`col-lg-${![1].includes(item.type) ? '10' : '12'}`}>\n                    <div className=\"w-100\">\n                      <div className=\"d-flex flex-grow-1 w-100 mb-3 justify-content-between align-items-center\">\n                          <div className=\"d-flex justify-content-between align-items-center\">\n                            <div className=\"d-flex align-items-center\"> \n                               <AuthorInfo link={item.link} topperfoming={1} picture={item.authorImage}  authorUsername={item.authorUsername} authorName={item.authorName}  date={item.created} /> \n                            </div>\n                            <div className=\"list_category_icon cursor-pointer d-flex\">\n                                 <NetworkIcon icon={item.network.icon} size={'font-size-h2'}/>\n                            </div>\n                          </div>\n                          <ConnectButton link={item.link} network={item.network.id} />\n                      </div>\n                      <div className=\"text-dark font-weight-normal font-size-sm overflow-hidden text-ellipsis line-clamp-3\">{item.content}</div>\n                    </div>\n                    <div className=\"row align-items-center mt-5\">\n\n\n                   { item.recommendationScore ?\n                      <div className=\"col-md-6 col-12\">\n                        <div className=\"d-flex align-items-center justify-content-between py-2\">\n                            <span className=\"text-secondary font-weight-bold font-size-md w-50\">AI Recommendation</span>\n                            <p className=\"text-dark fw-bold mb-0 d-flex align-items-center w-50\"><span className=\"bulits bg-success d-block rounded-circle size-12 me-2\"></span>  Recommendation ({item.recommendationScore})\n                            </p>\n                        </div>\n                      </div> : null }\n\n                    { item.sentiment ?  \n                      <div className=\"col-md-6 col-12\">\n                        <div className=\"d-flex align-items-center justify-content-between py-2\">\n                            <span className=\"text-secondary font-weight-bold font-size-md w-50\">Sentiment</span>\n                            <div className=\"w-50\">\n                               <Sentiment sentiment={item.sentiment} />\n                            </div>\n                        </div>\n                      </div> : null}\n\n \n                     { item.postPerformance ?   \n                      <div className=\"col-md-6 col-12\">\n                        <div className=\"d-flex align-items-center justify-content-between py-2\">\n                            <span className=\"text-secondary font-weight-bold font-size-md w-50\">Impressions</span>\n                            <p className=\"text-dark fw-bold mb-0 d-flex w-50\">\n                              {kFormatter(Math.round(item.postPerformance))} \n                            </p>\n                        </div>\n                      </div> : null }\n\n                     { item.feedName ? \n                      <div className=\"col-md-6 col-12\">\n                        <div className=\"d-flex align-items-center justify-content-between py-2\">\n                            <span className=\"text-secondary font-weight-bold font-size-md w-50\"> Feed Name</span>\n                                <p className=\"text-dark fw-bold mb-0 d-flex w-50\">{`#${item.feedName}`}</p>\n                        </div>\n                      </div> : null }\n\n                      { item.postClicks ?\n                      <div className=\"col-md-6 col-12\">\n                        <div className=\"d-flex align-items-center justify-content-between py-2\">\n                            <span className=\"text-secondary font-weight-bold font-size-md w-50\">Post Clicks</span>\n                                <p className=\"text-dark fw-bold mb-0 d-flex w-50\">\n                                  { kFormatter(item.postClicks)}\n                                </p>\n                        </div>\n                      </div> : null }\n\n                    </div>\n                  </div>\n              </div>\n            </div>\n           </div>\n            ) : <DataNotFound />\n          }\n\n        </div>\n          <Paggination isLoading={isLoading} total={total} paginateData={paginateData} maxPage={maxPage} currentPage={currentPage} limit={limit}  managePagging={this.managePagging} />\n       </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {    \n  return {\n    analyticwall: state.analyticwall,\n  }\n}\n\nexport default connect(mapStateToProps)(PostPopup);"],"names":["props","includes","network","_jsx","_Fragment","children","className","_jsxs","Button","variant","onClick","window","open","link","type","btnClass","FontAwesomeIcon","icon","iconClass","List","PopupListSkeleton","map","React","PostPopup","Component","constructor","_this","arguments","this","state","fetchRecord","isLoading","total","limit","offset","paginateData","currentPage","maxPage","username","onLoadFilterData","_selectedWallFeed$wal","isSearch","length","undefined","analyticwall","moreData","selectedWallFeed","dateFilter","selectedFeed","wallData","wall","id","startDate","endDate","feedIDs","fItem","push","value","setState","dateFormat","join","then","response","responseData","data","totalCount","paginate","postData","catch","error","console","managePagging","pageClick","page","updateSearchText","componentDidMount","render","analyticsStatus","isPdfDownloading","PopupSearch","item","mIndex","PostMedia","mediaType","postFile","postId","AuthorInfo","topperfoming","picture","authorImage","authorUsername","authorName","date","created","NetworkIcon","size","ConnectButton","content","recommendationScore","sentiment","Sentiment","postPerformance","kFormatter","Math","round","feedName","postClicks","DataNotFound","Paggination","connect"],"sourceRoot":""}