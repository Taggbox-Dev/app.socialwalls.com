{"version":3,"file":"static/js/5374.0a2b4751.chunk.js","mappings":"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","sources":["app/Layouts/Main/Moderation/Elements/ChangeOrderModal.js"],"sourcesContent":["import React, { Component } from 'react'\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal'\nimport { connect } from 'react-redux';\nimport { GET_PIN_TO_TOP_LIST, GET_REORDER_PIN_TO_TOP } from '../../../../../actions/moderationActions';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport ReactHtmlParser from 'react-html-parser';\nimport { Card, Image, OverlayTrigger, Tooltip } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { GET_NETWORK_ICON, GET_NETWORK_NAME } from '../../../../../utils'\nimport { baseUrl, FontAwesomeIcon } from '../../../../CommonComponents/AssetsHelper'\nimport ImageType from '../../../../CommonComponents/MediaType/ImageType'\nimport Author from '../../../../CommonComponents/Author/Author'\nimport { MOD_PIN_LIST } from '../../../../../reducers/keys';\nimport LoadingScreen from '../../../../CommonComponents/LoadingScreen';\n\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed); return result;\n};\n\nconst getItemStyle = (isDragging, draggableStyle) => ({ ...draggableStyle });\nconst getListStyle = isDraggingOver => ({});\n\nclass ChangeOrderModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { items: [], newArray: [], spinner:false, updateOrder: false };\n        this.onDragEnd = this.onDragEnd.bind(this);\n    }\n    componentDidMount() { this.onLoadData(this.props); }\n\n\n    reArrangePosts = () => {\n        const { newArray, updateOrder } = this.state;\n        const postId = newArray.map(item => item.id);\n        const indexing = newArray.map((_, index) => index + 1);\n        if(updateOrder) {\n            this.setState({spinner:true})\n            this.props.GET_REORDER_PIN_TO_TOP(postId, indexing, () => { this.setState({spinner:false},()=>this.props.closeModalPop()) })\n        }\n        \n    };\n\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.openpinToTopModal !== this.props.openpinToTopModal) {\n            if (this.props.openpinToTopModal) this.props.GET_PIN_TO_TOP_LIST()\n        }\n        if (prevProps.pinToTop !== this.props.pinToTop) this.onLoadData(this.props)\n    }\n\n\n    onLoadData = (props) => {\n        const { pinToTop } = props;\n        this.setState({ items: pinToTop, newArray: pinToTop });\n    }\n\n    onDragEnd(result) {\n        if (!result.destination) { return; }\n        const items = reorder(this.state.items, result.source.index, result.destination.index);\n        this.setState({ items,  newArray: items , updateOrder:true});\n    }\n    render() {\n        const { openpinToTopModal, closeModalPop } = this.props\n        const {spinner} = this.state\n        return (\n\n            <Modal className='pintotop_modal' size=\"lg\" show={openpinToTopModal} onHide={closeModalPop} centered>\n                <Modal.Header closeButton >\n                    <Modal.Title>Change Order</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='px-3 overflow-auto' style={{height:500}}>\n                        {this.state.items && this.state.items?.length > 0 ? \n                        <DragDropContext onDragEnd={this.onDragEnd} >\n                            <Droppable droppableId=\"droppable\">\n                                {(provided, snapshot) => (\n                                    <div {...provided.droppableProps} ref={provided.innerRef} style={getListStyle(snapshot.isDraggingOver)}>\n                                        {this.state.items && this.state.items.length && this.state.items.map((item, index) => (\n                                            <Draggable key={`item-${index}`} draggableId={`item-${index}`} index={index}>\n                                                {(provided, snapshot) => (\n                                                    <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} style={getItemStyle(snapshot.isDragging, provided.draggableProps.style)}>\n                                                        <Card data-id={item.id} className='mb-3'>\n                                                            <Card.Body className='p-2'>\n                                                                <span className='position-absolute start-0 translate-middle h-18px w-18px rounded-circle f-center bg-dark text-white top-50 fs-10 fw-medium' style={{ zIndex: 1 }}>{index + 1}</span>\n                                                                <div className=\"d-flex flex-lg-row flex-column\">\n                                                                    <div className='f-center h-100 text-gray-300 me-lg-2 mb-2 fs-6'>\n                                                                        <FontAwesomeIcon type={'solid'} icon={'grip-dots-vertical'} />\n                                                                    </div>\n                                                                    <div className='d-flex flex-shrink-0 flex-column cursor-pointer pe-lg-4 mx-auto mb-lg-0 mb-3' style={{ width: 120 }}>\n                                                                        <ImageType mediaClass={'position-relative rounded-1 overflow-hidden w-100'} size={100} height={120} width={120} url={item.newMedia} alt={''} isCover={true} />\n                                                                    </div>\n                                                                    <div className=\"d-flex flex-grow-1 flex-column pl-lg-5 w-100 overflow-hidden\">\n                                                                        <div className=\"d-flex align-items-start mb-1\">\n                                                                            <a href={item.link} target='_blank' className=\"d-flex align-items-start me-2 flex-grow-1 overflow-hidden text-decoration-none text-gray-800\">\n                                                                                <Author className={'symbol symbol-40 rounded-circle flex-shrink-0 me-2 overflow-hidden'}\n                                                                                    imageSize={40}\n                                                                                    symbolClass={'symbol-label fs-5'}\n                                                                                    name={item.username} profileUrl={item.picture} networkId={item.networkId} />\n                                                                                <div className=\"pe-2 w-100 overflow-hidden\">\n                                                                                    <p className=\" mb-0\"><strong className=\"text-break text-ellipsis w-100 d-block\">{item.name}</strong></p>\n                                                                                    <p className=\"mb-1 text-gray-500 text-break fs-9\">@{item.username}</p>\n                                                                                </div>\n                                                                            </a>\n                                                                            <span className=\"d-flex align-items-center h-20px w-20px flex-shrink-0\">\n                                                                                <OverlayTrigger placement=\"top\" overlay={<Tooltip>{GET_NETWORK_NAME(item.networkId)}</Tooltip>}>\n                                                                                <FontAwesomeIcon icon={GET_NETWORK_ICON(item.networkId)} iconClass={`fs-4 fab ${item.networkId == 12 ? 'fa-solid' : 'fa-brands'}`} />\n                                                                                </OverlayTrigger>\n                                                                            </span>\n                                                                        </div>\n                                                                        <p className='line-clamp line-clamp-3 mb-1'>{item.postcontent}</p>\n                                                                    </div>\n                                                                </div>\n                                                            </Card.Body>\n                                                        </Card>\n                                                    </div>\n                                                )}\n                                            </Draggable>\n                                        ))}\n                                    </div>\n                                )}\n                            </Droppable>\n                        </DragDropContext>\n                        :\n                        <LoadingScreen/>\n                        }\n\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant='secondary' className='ms-3 btn-min-w' onClick={closeModalPop}>Cancel</Button>\n                    <Button className={`ms-3 btn-min-w ${spinner ? 'spinner':''}`} onClick={this.reArrangePosts}>Done</Button>\n                </Modal.Footer>\n            </Modal>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        pinToTop: state.moderation?.pinToTop\n    }\n}\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n\n        MOD_PIN_LIST: () => dispatch(MOD_PIN_LIST()),\n        GET_PIN_TO_TOP_LIST: () => dispatch(GET_PIN_TO_TOP_LIST()),\n        GET_REORDER_PIN_TO_TOP: (postId, indexing, callBack) => dispatch(GET_REORDER_PIN_TO_TOP(postId, indexing, callBack))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangeOrderModal);\n\n"],"names":["ChangeOrderModal","Component","constructor","props","super","reArrangePosts","newArray","updateOrder","this","state","postId","map","item","id","indexing","_","index","setState","spinner","GET_REORDER_PIN_TO_TOP","closeModalPop","onLoadData","pinToTop","items","onDragEnd","bind","componentDidMount","componentDidUpdate","prevProps","openpinToTopModal","GET_PIN_TO_TOP_LIST","result","destination","reorder","list","startIndex","endIndex","Array","from","removed","splice","source","render","_this$state$items","_jsxs","Modal","className","size","show","onHide","centered","children","_jsx","Header","closeButton","Title","Body","style","height","length","DragDropContext","Droppable","droppableId","provided","snapshot","droppableProps","ref","innerRef","isDraggingOver","Draggable","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","Card","zIndex","FontAwesomeIcon","type","icon","width","ImageType","mediaClass","url","newMedia","alt","isCover","href","link","target","Author","imageSize","symbolClass","name","username","profileUrl","picture","networkId","OverlayTrigger","placement","overlay","Tooltip","GET_NETWORK_NAME","GET_NETWORK_ICON","iconClass","postcontent","getItemStyle","LoadingScreen","Footer","Button","variant","onClick","connect","_state$moderation","moderation","dispatch","MOD_PIN_LIST","callBack"],"sourceRoot":""}