{"version":3,"file":"static/js/4372.7daaac10.chunk.js","mappings":"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","sources":["app/Display/analytics-new/layout/common/networkIcon.js","app/Display/analytics-new/layout/common/percentDifference.js","app/Display/dashboard-new/components/common/slideSection.js","app/Display/dashboard-new/components/skeleton/wallsSkeleton.js","app/Display/dashboard-new/components/createdWalls.js"],"sourcesContent":["import React from \"react\";\n\nconst NetworkIcon = (props) => {\n  return (\n    ![\"fa-twitter\"].includes(props.icon) ? <i className={`fab ${props.icon} ${props.isDashboard ? props.isDashboard : ''} ${props.size ? props.size : 'font-size-sm'}`}></i> : <svg id=\"twitter\" xmlns=\"http://www.w3.org/2000/svg\" width=\"22\" height=\"22\" viewBox=\"0 0 44.518 44.518\"><path id=\"Path_5\" data-name=\"Path 5\" d=\"M0,0H44.518V44.518H0Z\" fill=\"none\"></path> <path id=\"Path_7\" data-name=\"Path 7\" d=\"M19.036,13.554,30.942,0H28.121L17.778,11.766,9.523,0H0L12.486,17.794,0,32.006H2.821L13.737,19.578l8.72,12.429H31.98Zm-3.865,4.4L13.9,16.177,3.838,2.083H8.172L16.3,13.462l1.262,1.773L28.12,30.025H23.786Zm0,0\" transform=\"translate(6.313 6.281)\" fill=\"#0f1419\"></path></svg>\n  );\n};\n\nexport default React.memo(NetworkIcon);\n","    import React from \"react\";\nimport { kFormatter } from \"../../../../../utils\";\n\n    const PercentDifference = (props) => {\n\n    return props.difference>0 ? (\n        <span\n        className={`score-count text-${\n            props.flag == 1 ? \"success\" : \"danger\"\n        } d-flex align-items-center ms-2`}\n        >\n  \n        {props.flag == 1 ? (\n            <svg\n            class=\"me-1\"\n            width=\"18\"\n            height=\"16\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"currentColor\"\n            >\n            <path d=\"M12 8L18 14H6L12 8Z\" fill={`#02a100`}></path>\n            </svg>\n        ) : (\n            <svg\n            className=\"me-1\"\n            width=\"12\"\n            height=\"12\"\n            viewBox=\"0 0 6 4\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            >\n            <g clip-path=\"url(#clip0_1717_12)\">\n                <path d=\"M3 3.5L0 0.5H6L3 3.5Z\" fill={`#f64e60`} />\n            </g>\n            </svg>\n        )}\n\n         \n        {`${kFormatter(Math.round(props.difference))}%`}\n        </span>\n    ) : null;\n    };\n\n    export default React.memo(PercentDifference);\n","import React, { useEffect, useState } from \"react\";\nimport { Splide, SplideTrack } from \"@splidejs/react-splide\";\nimport \"../../../analytics-new/assets/css/slide.scss\";\nimport \"@splidejs/react-splide/css\";\n\nconst CreatedWalls = ({\n  setactiveWall,\n  section,\n  totalRecord,\n  splideRef,\n  children,\n}) => {\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [perPage, setPerPage] = useState(); // Default perPage count\n\n\n  useEffect(() => {\n\n    if (section && setactiveWall) {\n      const splideInstance = splideRef.current.splide;\n\n   //   const handleResize = () => setPerPage(splideInstance.options.perPage);\n  \n      // Attach the resize event listener\n     // splideInstance.on('resize', handleResize);\n      // Set the initial perPage value\n      setPerPage(splideInstance.options.perPage);\n\n      splideInstance.on(\"click\", (e) => {\n         if(section==1) splideRef.current.splide.go(e.index); // Move to the clicked slide\n      });\n\n      splideRef.current?.splide.on(\"move\", (newIndex) => {\n        if(section==1){\n           manageSlider(newIndex);\n           setactiveWall(newIndex);\n        }\n\n        setCurrentSlide(newIndex);\n\n      });\n\n      if (section==1 && (!splideRef.current || totalRecord <= 1)) {\n        manageSlider();\n        setactiveWall(1);\n      }\n    }else{\n      splideRef.current?.splide.on(\"move\", (newIndex) => {\n        setactiveWall(newIndex);\n      });\n    }\n  }, []);\n\n  const manageSlider = (index = null) => {\n    const totalList = totalRecord * 2;\n    const newIndexCondition = totalRecord - 1;\n\n    const toggleDisplay = (displayStyle) => {\n      const slideWalls = document.getElementsByClassName(`splide__slide_walls`);\n\n      for (let i = totalRecord + 1; i <= totalList; i++) {\n        if (slideWalls && slideWalls.length) {\n          let updateKey = totalRecord - 1;\n          let elementNew =\n            slideWalls[i + updateKey] &&\n            document.getElementById(slideWalls[i + updateKey].id);\n          if (elementNew) elementNew.style.display = displayStyle;\n        }\n      }\n    };\n\n    if (index === newIndexCondition || index == null) {\n      if (index == null) {\n        const Ispreview = document.getElementsByClassName(`is-prev`);\n        const splideListUl = document.getElementsByClassName(`splide__list_ul`);\n        const Isnext = document.getElementsByClassName(`is-next`);\n\n        if (Ispreview.length) Ispreview[0].style.display = \"none\";\n        if (Isnext.length) Isnext[0].style.display = \"none\";\n        if (splideListUl)\n          splideListUl[0].querySelector(\"ul\").style.transform = \"translateX(0)\";\n      } else {\n        toggleDisplay(\"none\");\n      }\n    } else {\n      toggleDisplay(\"block\");\n    }\n  };\n\n  const createBreakpointSettings = (perPage, isWall, clones, postCount) => ({ \n      perPage,\n      clones: clones,\n      autoplay: isWall && postCount > perPage,\n      drag: totalPost>1 && postCount > perPage,\n      loop: postCount > perPage,\n      arrows: postCount > perPage,\n    });\n\n  const totalPost = totalRecord || 0;\n  const canSlide = totalPost > 3;\n  const perPagePost = canSlide ? 3 : totalPost;\n\n  const settings = {\n    start: 0,\n    type: section == 1 ? \"loop\" : \"slide\",\n    //rewind: true,\n    speed: 1000,\n    perMove: 1,\n    loop: false,\n    lazyLoad: 'nearby', \n    interval: 5000,\n    drag: totalPost>1 ? true : false,\n    //clones: 1,\n    perPage: section == 1 ? 0 : totalRecord > 3 ? 3 : totalRecord,\n    autoWidth: section == 1 ? true : false,\n    gap: section == 1 ? 15 : -15,\n    autoplay: section == 1 ? false : true,\n    pagination: false,\n    arrows: section === 1 ? totalRecord !== 1 : true,\n    fixedHeight: true,\n    breakpoints: {\n      0: createBreakpointSettings(1,1, perPagePost, totalPost),\n      579: createBreakpointSettings(1,1, perPagePost, totalPost),\n      1300: createBreakpointSettings(section==1 ? 1 : 2,1, 0, totalPost),\n      2200: createBreakpointSettings(section==1 ? 1 : 3,section==1 ? 0 : 1, 0, totalPost),\n    },\n  };\n\n  return (\n    <Splide\n      className={section ? \"splide__list_ul\" : \"\"}\n      ref={splideRef}\n      hasTrack={false}\n      options={settings}\n      \n    >\n\n      \n<div\n        className=\"splide__arrows splide__arrows--ltr tb_g_h_arrow_wrapper_\"\n        role=\"navigation\"\n        aria-label=\"Slider Navigation Wrapper\"\n      >\n        <div\n          role=\"navigation\"\n          className=\"tb_g_h_arrow splide__arrow splide__arrow--prev tb_g_h_arrow_left__ tb__icon tb-arrow-left-alt\"\n          aria-labelledby=\"Navigation Previous Slide\"\n        >\n          {\" \"}\n          <button disabled={currentSlide === 0}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              fill=\"currentColor\"\n            >\n              <path d=\"M10.8284 12.0007L15.7782 16.9504L14.364 18.3646L8 12.0007L14.364 5.63672L15.7782 7.05093L10.8284 12.0007Z\"></path>\n            </svg>\n          </button>\n        </div>\n        <div\n          role=\"navigation\"\n          className=\"tb_g_h_arrow splide__arrow splide__arrow--next tb_g_h_arrow_right__ tb__icon tb-arrow-right-alt\"\n          aria-labelledby=\"Navigation Next Slide\"\n        >\n          {\" \"}\n\n          <button disabled={currentSlide === totalRecord - (section == 1 ? 1 : perPage)}>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width={\"20px\"}\n              height={\"20px\"}\n              viewBox=\"0 0 24 24\"\n              fill=\"currentColor\"\n            >\n              <path d=\"M13.1717 12.0007L8.22192 7.05093L9.63614 5.63672L16.0001 12.0007L9.63614 18.3646L8.22192 16.9504L13.1717 12.0007Z\"></path>\n            </svg>{\" \"}\n          </button>\n        </div>\n      </div>\n\n      <SplideTrack>{children}</SplideTrack>\n    </Splide>\n  );\n};\n\nexport default CreatedWalls;","import React from \"react\";\n\nconst Network = () => {\n  return (\n    <div class=\"d-flex align-items-center flex-grow-1 mb-3\">\n      <div class=\"symbol symbol-45 symbol-light me-2 social_user_img\">\n        <span class=\"sk_img\"></span>\n      </div>\n      <div class=\"d-flex text-left flex-column conn_user_info w-25\">\n        <div class=\"sk_line sk_line_height_12\"></div>\n      </div>\n    </div>\n  );\n};\n\nconst Action = () => {\n  return <div class=\"sk_line sk_line_height_28 me-2\"></div>;\n};\n\nconst WallsSkeleton = () => {\n  return (\n    <div class=\"d-flex align-items-center flex-wrap justify-content-between\">\n      {[1, 2].map(() => {\n        return (\n          <div className=\"col-6 px-2\">\n            <div class=\"ex-graphmin-height w-100\">\n              <div class=\"ex-recentwbox d-block p-4\">\n                <div className=\"row\">\n                  <div className=\"col-6\">\n                    <div class=\"ex-recentwright w-100 mb-3\">\n                      <div\n                        class=\"sk_rect btn-min-w sk_img_thumb\"\n                        style={{ paddingBottom: \"55%\" }}\n                      ></div>\n                    </div>\n                  </div>\n                  <div className=\"col-6\">\n                    <div class=\"w-100\">\n                      <div class=\"ex-recentwleft w-50\">\n                        <div class=\"sk_line sk_line_height_12\"></div>\n                        <div class=\"sk_line sk_line_80 sk_line_height_8\"></div>\n                      </div>\n                      <div className=\"mt-5\">\n                        <Network />\n                        <Network />\n                        <Network />\n                      </div>\n                      <div class=\"ex-recentwright d-flex w-100\">\n                        <Action />\n                        <Action />\n                        <Action />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default React.memo(WallsSkeleton);\n","import React, { useEffect, useRef, useState } from \"react\";\n  import { Card, CardBody, Dropdown } from \"react-bootstrap\";\n  import { SplideSlide } from \"@splidejs/react-splide\";\n  import SlideSection from \"./common/slideSection\";\n  import NetworkIcon from \"../../analytics-new/layout/common/networkIcon\";\n  import { Link, useNavigate } from \"react-router-dom\";\n  import { getWidgetWallData } from \"../../../../actions/wallDataAction\";\n  import { shallowEqual, useDispatch } from \"react-redux\";\n  import { getWallFeeds } from \"../../../../actions/display/analytics\";\n  import { toggleAddFeedsSection_D } from \"../../../../actions/display/showDisplayModalAction\";\n  import { openCreateNewWallPopup } from \"../../../../actions/display/wallsAction\";\n  import DropdownComponet from \"../../walls/component/modal/Dropdown\";\n  import WallsSkeleton from \"./skeleton/wallsSkeleton\";\n  import HoverVideoPlayer from \"react-hover-video-player\";\n  import { baseUrl, kFormatter } from \"../../../../utils\";\n  import CreateWall from \"./common/createWall\";\n  import { useSelector } from \"react-redux\";\n  import PercentDifference from \"../../analytics-new/layout/common/percentDifference\";\nimport ReactPlayer from \"react-player\";\n\n  const CreatedWalls = (props) => {\n    const { allWalllist, loader } = props;\n    const { userData } = useSelector(\n      (state) => ({\n        wallReducer: state.wallReducer,\n        userData: state.authenticated.userData,\n      }),\n      shallowEqual\n    );\n\n    const splideRef = useRef(null);\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const [upgrade, setUpgrade] = React.useState(false);\n    const [updateSlider, setupdateSlider] = React.useState(0);\n    const [modalData, setModalData] = React.useState({\n      profanity: 0,\n      modalShow: false,\n      name: \"\",\n      url: \"\",\n      wall_id: null,\n      autoUpdate: 1,\n      rename_status: 0,\n      callbackWall: 0,\n    });\n\n    const [activeWall, setactiveWall] = useState(0);\n    const { user, UserPlan } = props.userData;\n\n    const callbackWall = (status) => {};\n\n    const handleCategoryClick = (startIndex) => {\n      if (splideRef.current) splideRef.current.splide.go(startIndex); // Move to the specific slide\n    };\n\n    const displayWindowOpen = (wallId) => {\n      dispatch(getWidgetWallData(user.ownerId, wallId));\n      dispatch(getWallFeeds(user.ownerId));\n      navigate(`/wall/preview/${wallId}`);\n    };\n\n    \n    const nevigationRedirect = (activeIndex, wallId = 0, nevigation = 0, feedId = 0) => {\n\n      if (allWalllist.length != 1 && !activeIndex) return;\n     \n      switch (nevigation) {\n        case 1:\n          navigate(`/moderation/index/${wallId}`);\n        localStorage.setItem(\"wallId\", wallId);\n          break;\n          \n        case 2:\n          const analyticPath = ![58].includes(UserPlan?.planId) ? \"/analytic-new/\" : \"analytic/\";\n          navigate(`${analyticPath}${wallId}`);\n          dispatch(getWidgetWallData(user?.ownerId, wallId));\n          break;\n          \n        case 3:\n          displayWindowOpen(wallId);\n          break;\n          \n        case 4:\n          if (!feedId?.length) dispatch(toggleAddFeedsSection_D(true));\n          dispatch(getWidgetWallData(user?.ownerId, wallId));\n          navigate(`/wall/index/${wallId}`);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    const clickToUpdateState = (data) => (event) => {\n      dispatch(openCreateNewWallPopup(false));\n      const widgetCount =\n        allWalllist && allWalllist.length ? allWalllist.length : 0;\n      if (widgetCount < userData.UserRule.walls || data.rename_status == 1)\n        setModalData(data);\n      else setUpgrade(true);\n    };\n\n\n    \n    const handleResize = () => setupdateSlider(Math.random())\n\n    useEffect(() => {\n      window.addEventListener(\"resize\", handleResize);\n\n      return () => {\n          window.removeEventListener(\"resize\", handleResize);\n      };\n    }, []);\n\n\n     return (\n      <div className=\"created-walls-section mb-5\">\n        <Card className=\"p-0 card-custom card-stretch\">\n          {(allWalllist && Object.keys(allWalllist).length) || loader ? (\n            <>\n              <Card.Header className=\"p-5\">\n                <div className=\"m-0 d-flex align-items-center justify-content-between card-title h5 w-100\">\n                  <h6 class=\"card-label font-weight-bolder m-0 \">\n                    My Walls\n                  </h6>\n                  {!loader ? (\n                    <div className=\"\">\n                      <Link\n                        to={\"/walls\"}\n                        className=\"text-secondary font-size-base\"\n                      >\n                        View All\n                      </Link>\n                    </div>\n                  ) : null}\n                </div>\n              </Card.Header>\n\n              <CardBody className=\"p-5\">\n                {loader ? (\n                  <WallsSkeleton />\n                ) : (\n                  <>\n                    <div className=\"row mb-5 \">\n                      <div className=\"col-sm-8\">\n                        <div className=\"custom-pagination\">\n                          {Object.keys(allWalllist).length &&\n                            allWalllist.map((e, index) => (\n                              <button\n                                className={`btn ${\n                                  activeWall == index ||\n                                  Object.keys(allWalllist).length == 1\n                                    ? \"btn-primary\"\n                                    : \"btn-outline-dark\"\n                                } me-2 mb-1 text-capitalize overflow-hidden text-nowrap text-ellipsis text-capitalize mx-w-200`}\n                                key={index}\n                                onClick={() => {\n                                  handleCategoryClick(index);\n                                  setactiveWall(index);\n                                }}\n                              >\n                                {e.name}\n                              </button>\n                            ))}\n                        </div>\n                      </div>\n                      <div className=\"col-sm-4\">\n                        <div className=\"custom_primary_secondary d-flex justify-content-end mt-1\">\n                          <CreateWall\n                            modalData={modalData}\n                            widgetWallsData={allWalllist}\n                            upgrade={upgrade}\n                            clickToUpdateState={clickToUpdateState}\n                            setUpgrade={setUpgrade}\n                            setupdateWall={\"\"}\n                            setModalData={setModalData}\n                            isCollaboratorRole={JSON.parse(\n                              localStorage.getItem(\"isCollaborator\")\n                            )}\n                          />\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Splide Slider */}\n\n                    <SlideSection\n                      section={1}\n                      key={updateSlider}\n                      totalRecord={allWalllist.length}\n                      splideRef={splideRef}\n                      setactiveWall={setactiveWall}\n                    >\n                      {allWalllist.map((e, index) => {\n\n                        const activewallIndex = activeWall===index\n                        return (\n                          <SplideSlide\n                            data-feedList={e.feedList}\n                            data-wallId={e.id}\n                            className={`splide__slide_walls`}\n                            key={index}\n                          >\n                            <div\n                              key={activeWall + index}\n                              className={`created-walls-card h-100 splide__slide-${index}`}\n                            >\n                              <div className={`created-walls-card-inner h-100 p-5 ${(activeWall === index || allWalllist.length==1) ? 'overlay-hide' : ''}`}>\n                                <div className=\"row\">\n                                  <div className=\"col-md-6 nevigation-wall\">\n                                    <div className=\"wall_cont_wrap innter_wall_cont_wrap_ cursor-pointer created-walls-card-img p-0\">\n                                      <a\n                                        to={`#`}\n                                        onClick={() =>  nevigationRedirect(activewallIndex,\n                                                e.id,\n                                                4,\n                                                e.feedList\n                                              )\n                                          }\n                                        className=\"card card-custom overlay shadow-none overflow-hidden rounded-0\"\n                                      >\n                                        {(activeWall === index || allWalllist.length==1) ? (\n                                        <>\n                                          <ReactPlayer\n                                            className=\"tb_post_modal_video w-100 h-100 mx-h-470\"\n                                            url={`${baseUrl(`theme-media/theme-video/${e.signageTheme}.mp4?v=45445`)}`}\n                                            data-type=\"video\"\n                                            autoPlay={true}\n                                            playing={true}\n                                            muted={true}\n                                            playsinline={true}\n                                            loop={true}\n                                            style={{\n                                              width: \"100%\",\n                                              paddingTop: \"-10px\",\n                                            }}\n                                          />  <img\n                                          role=\"img\"\n                                          src={`${baseUrl(\n                                            `theme-media/theme-thumb/${e.signageTheme}.png`\n                                          )}`}\n                                          height={260}\n                                          width={\"100%\"}\n                                        />\n                                          </>\n                                        ) : (\n                                          <>\n                                           <HoverVideoPlayer className=\"position-absolute h-100\"\n                                            videoSrc={`${baseUrl(\n                                              `theme-media/theme-video/${e.signageTheme}.mp4?v=454`\n                                            )}`}\n                                            width={391}\n                                            height={300}\n                                            style={{\n                                              width: \"100%\",\n                                              paddingTop: \"-10px\",\n                                            }}\n                                          /> <img\n                                          role=\"img\"\n                                          src={`${baseUrl(\n                                            `theme-media/theme-thumb/${e.signageTheme}.png`\n                                          )}`}\n                                          height={260}\n                                          width={\"100%\"}\n                                        />\n                                          </>\n                                        )}\n\n                                        <div className=\"overlay-layer\">\n                                          <img\n                                            src={baseUrl(\n                                              `dashboard/icons/play-icon.svg`\n                                            )}\n                                            height={46}\n                                            width={46}\n                                            className=\"img-fluid\"\n                                            alt=\"play\"\n                                          />\n                                        </div>\n                                      </a>\n                                    </div>\n                                  </div>\n                                  <div className=\"col-md-6\">\n                                    <div className=\"mt-3 d-flex flex-column justify-content-between h-100\">\n                                      <div className=\"wall_section-2\">\n                                        <div className=\"d-flex justify-content-between mb-8\">\n                                          <a\n                                            to={`#`}\n                                            onClick={() =>\n                                            (activeWall === index || allWalllist.length==1)\n                                                ? nevigationRedirect(activewallIndex,\n                                                    e.id,\n                                                    4,\n                                                    e.feedList\n                                                  )\n                                                : {}\n                                            }\n                                          >\n                                            <div className=\"\">\n                                              <h5 className=\"mb-2 text-capitalize d-flex align-items-center nevigation-wall cursor-pointer\">\n                                                {e.name}\n                                                {e.activeScreen ? (\n                                                  <span className=\"status_active\"></span>\n                                                ) : null}\n                                              </h5>\n                                              <p className=\"text-secondary text-capitalize m-0 cursor-pointer\">\n                                                {`${e.themeName} : ${e.themeLayout}`}\n                                              </p>\n                                            </div>\n                                          </a>\n                                          <div className=\"\">\n                                            <p className=\"text-secondary font-weight-bold font-size-h6 m-0\">\n                                              Posts: {kFormatter(Math.round(e.totalPostCount))}\n\n                                              { e.difference ?  \n                                                <PercentDifference difference={e.difference} flag={e.flagColor} /> : null }  \n                                            </p>\n                                          </div>\n                                        </div>\n                                        {e.feedList &&\n                                        Object.keys(e.feedList).length ? (\n                                          <div className=\"created-walls-network mb-8\">\n                                            <ul className=\"m-0\">\n                                              {e.feedList.map((fdata, key) => {\n                                                return (\n                                                  <li className=\"d-flex align-items-center mb-4 \">\n                                                    <NetworkIcon\n                                                      isDashboard={\n                                                        \"me-2 text-center text-white\"\n                                                      }\n                                                      icon={fdata.socialIcon}\n                                                    />\n                                                    { fdata.name.replace(/<i[^>]*>(.*?)<\\/i>/g, '') }\n                                                  </li>\n                                                );\n                                              })}\n                                            </ul>\n                                          </div>\n                                        ) : null}\n                                      </div>\n\n                                      <div className=\"d-flex align-items-center justify-content-end mb-3\">\n                                        <div className=\"created-walls-report d-flex align-items-center flex-wrap\">\n                                          <a\n                                            onClick={() =>\n                                              nevigationRedirect(activewallIndex,e.id, 1)\n                                            }\n                                            href=\"#\"\n                                            className=\"btn btn-secondary d-flex align-items-center text-secondary me-2 border-0\"\n                                          >\n                                            <svg\n                                              xmlns=\"http://www.w3.org/2000/svg\"\n                                              className=\"me-2\"\n                                              width={\"20px\"}\n                                              height={\"20px\"}\n                                              viewBox=\"0 0 24 24\"\n                                              fill=\"currentColor\"\n                                            >\n                                              <path d=\"M6.99979 7V3C6.99979 2.44772 7.4475 2 7.99979 2H20.9998C21.5521 2 21.9998 2.44772 21.9998 3V16C21.9998 16.5523 21.5521 17 20.9998 17H17V20.9925C17 21.5489 16.551 22 15.9925 22H3.00728C2.45086 22 2 21.5511 2 20.9925L2.00276 8.00748C2.00288 7.45107 2.4518 7 3.01025 7H6.99979ZM8.99979 7H15.9927C16.549 7 17 7.44892 17 8.00748V15H19.9998V4H8.99979V7ZM15 9H4.00255L4.00021 20H15V9ZM8.50242 18L4.96689 14.4645L6.3811 13.0503L8.50242 15.1716L12.7451 10.9289L14.1593 12.3431L8.50242 18Z\"></path>\n                                            </svg>{\" \"}\n                                            Moderate\n                                          </a>\n                                          <a\n                                            href=\"#\"\n                                            onClick={() =>\n                                              nevigationRedirect(activewallIndex,e.id, 2)\n                                            }\n                                            className=\"btn btn-secondary d-flex align-items-center text-secondary me-2 border-0\"\n                                          >\n                                            <svg\n                                              xmlns=\"http://www.w3.org/2000/svg\"\n                                              className=\"me-2\"\n                                              viewBox=\"0 0 24 24\"\n                                              width={\"20px\"}\n                                              height={\"20px\"}\n                                              fill=\"currentColor\"\n                                            >\n                                              <path d=\"M2 13H8V21H2V13ZM16 8H22V21H16V8ZM9 3H15V21H9V3ZM4 15V19H6V15H4ZM11 5V19H13V5H11ZM18 10V19H20V10H18Z\"></path>\n                                            </svg>{\" \"}\n                                            Analytics\n                                          </a>\n                                          <a\n                                            href=\"#\"\n                                            onClick={() =>\n                                              nevigationRedirect(activewallIndex,e.id, 3)\n                                            }\n                                            className=\"btn btn-secondary d-flex align-items-center text-secondary me-2 border-0\"\n                                          >\n                                            <svg\n                                              xmlns=\"http://www.w3.org/2000/svg\"\n                                              className=\"me-2\"\n                                              viewBox=\"0 0 24 24\"\n                                              width={\"20px\"}\n                                              height={\"20px\"}\n                                              fill=\"currentColor\"\n                                            >\n                                              <path d=\"M4 16H20V5H4V16ZM13 18V20H17V22H7V20H11V18H2.9918C2.44405 18 2 17.5511 2 16.9925V4.00748C2 3.45107 2.45531 3 2.9918 3H21.0082C21.556 3 22 3.44892 22 4.00748V16.9925C22 17.5489 21.5447 18 21.0082 18H13Z\"></path>\n                                            </svg>{\" \"}\n                                            Display\n                                          </a>\n                                          <a\n                                            href=\"#\"\n                                            onClick={() =>\n                                              (activeWall === index || allWalllist.length==1)\n                                                  ? nevigationRedirect(activewallIndex,\n                                                      e.id,\n                                                      4,\n                                                      e.feedList\n                                                    )\n                                                  : {}\n                                              }\n                                            className=\"btn btn-secondary d-flex align-items-center text-secondary me-2 border-0\"\n                                          >\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"me-2\" width={\"20px\"} height={\"20px\"} viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M16.7574 2.99678L14.7574 4.99678H5V18.9968H19V9.23943L21 7.23943V19.9968C21 20.5491 20.5523 20.9968 20 20.9968H4C3.44772 20.9968 3 20.5491 3 19.9968V3.99678C3 3.4445 3.44772 2.99678 4 2.99678H16.7574ZM20.4853 2.09729L21.8995 3.5115L12.7071 12.7039L11.2954 12.7064L11.2929 11.2897L20.4853 2.09729Z\"></path></svg>{\" \"}\n                                            Edit\n                                          </a>\n                                        </div>\n\n\n                                        <div className=\"\">\n                                          <button\n                                            type=\"button\"\n                                            className=\"p-0 border-0 bg-transparent mb-2\"\n                                          >\n                                            <div className=\"card-toolbar\">\n                                              <Dropdown\n                                                onClick={() =>\n                                                  nevigationRedirect(activewallIndex)\n                                                }\n                                                align={\"end\"}\n                                              >\n                                                <Dropdown.Toggle className=\"btn btn-link btn-icon btn-sm btn-clean btn-after-none w-auto\">\n                                                  <svg\n                                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                                    height={\"20px\"}\n                                                    width={\"20px\"}\n                                                    viewBox=\"0 0 24 24\"\n                                                    fill=\"currentColor\"\n                                                  >\n                                                    <path d=\"M12 3C10.9 3 10 3.9 10 5C10 6.1 10.9 7 12 7C13.1 7 14 6.1 14 5C14 3.9 13.1 3 12 3ZM12 17C10.9 17 10 17.9 10 19C10 20.1 10.9 21 12 21C13.1 21 14 20.1 14 19C14 17.9 13.1 17 12 17ZM12 10C10.9 10 10 10.9 10 12C10 13.1 10.9 14 12 14C13.1 14 14 13.1 14 12C14 10.9 13.1 10 12 10Z\"></path>\n                                                  </svg>\n                                                </Dropdown.Toggle>\n                                                <Dropdown.Menu\n                                                  style={{ width: 175 }}\n                                                >\n                                                  <DropdownComponet\n                                                    callbackWall={callbackWall}\n                                                    props={{\n                                                      wallsData: e,\n                                                      clickToUpdateState:\n                                                        clickToUpdateState,\n                                                    }}\n                                                    clickToUpdateState={\n                                                      clickToUpdateState\n                                                    }\n                                                    ownerId={user.ownerId}\n                                                    userData={props.userData}\n                                                  />\n                                                </Dropdown.Menu>\n                                              </Dropdown>\n                                            </div>\n                                          </button>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </SplideSlide>\n                        );\n                      })}\n                    </SlideSection>\n                  </>\n                )}\n              </CardBody>\n            </>\n          ) : (\n            <div className=\"col-12\">\n              <div className=\"d-flex justify-content-center w-100\">\n                <button\n                  type=\"button\"\n                  onClick={() =>\n                    clickToUpdateState({\n                      modalShow: true,\n                      wall_id: null,\n                      autoUpdate: 1,\n                      callbackWall: 1,\n                    })\n                  }\n                  className=\"btn btn-link d-flex flex-wrap flex-column align-content-center add_card_button create-new-wall cursor-pointer px-5 w-100\">\n                  <CreateWall\n                    firstWall={1}\n                    widgetWallsData={allWalllist}\n                    modalData={modalData}\n                    upgrade={upgrade}\n                    clickToUpdateState={clickToUpdateState}\n                    setUpgrade={setUpgrade}\n                    setupdateWall={\"\"}\n                    setModalData={setModalData}\n                    isCollaboratorRole={JSON.parse(\n                      localStorage.getItem(\"isCollaborator\")\n                    )}\n                  />\n                </button>\n              </div>\n            </div>\n          )}\n        </Card>\n      </div>\n    );\n  };\n\n  export default React.memo(CreatedWalls);\n"],"names":["NetworkIcon","props","includes","icon","_jsxs","id","xmlns","width","height","viewBox","children","_jsx","d","fill","transform","className","isDashboard","size","React","PercentDifference","difference","flag","class","kFormatter","Math","round","_ref","setactiveWall","section","totalRecord","splideRef","currentSlide","setCurrentSlide","useState","perPage","setPerPage","useEffect","_splideRef$current","splideInstance","current","splide","options","on","e","go","index","newIndex","manageSlider","_splideRef$current2","arguments","length","undefined","totalList","toggleDisplay","displayStyle","slideWalls","document","getElementsByClassName","i","updateKey","elementNew","getElementById","style","display","Ispreview","splideListUl","Isnext","querySelector","createBreakpointSettings","isWall","clones","postCount","autoplay","drag","totalPost","loop","arrows","perPagePost","settings","start","type","speed","perMove","lazyLoad","interval","autoWidth","gap","pagination","fixedHeight","breakpoints","Splide","ref","hasTrack","role","disabled","SplideTrack","Network","Action","WallsSkeleton","map","paddingBottom","CreatedWalls","allWalllist","loader","userData","useSelector","state","wallReducer","authenticated","shallowEqual","useRef","dispatch","useDispatch","navigate","useNavigate","upgrade","setUpgrade","updateSlider","setupdateSlider","modalData","setModalData","profanity","modalShow","name","url","wall_id","autoUpdate","rename_status","callbackWall","activeWall","user","UserPlan","status","nevigationRedirect","activeIndex","wallId","nevigation","feedId","localStorage","setItem","analyticPath","planId","getWidgetWallData","ownerId","getWallFeeds","displayWindowOpen","toggleAddFeedsSection_D","clickToUpdateState","data","event","openCreateNewWallPopup","UserRule","walls","handleResize","random","window","addEventListener","removeEventListener","Card","Object","keys","_Fragment","Header","Link","to","CardBody","onClick","startIndex","CreateWall","widgetWallsData","setupdateWall","isCollaboratorRole","JSON","parse","getItem","SlideSection","activewallIndex","SplideSlide","feedList","ReactPlayer","baseUrl","signageTheme","autoPlay","playing","muted","playsinline","paddingTop","src","HoverVideoPlayer","videoSrc","alt","activeScreen","themeName","themeLayout","totalPostCount","flagColor","fdata","key","socialIcon","replace","href","Dropdown","align","Toggle","Menu","DropdownComponet","wallsData","firstWall"],"sourceRoot":""}