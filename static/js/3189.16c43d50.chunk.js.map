{"version":3,"file":"static/js/3189.16c43d50.chunk.js","mappings":"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","sources":["app/Display/analytics-new/content/components/topeventVoice.js"],"sourcesContent":["    import { Card, Table } from \"react-bootstrap\";\n    import \"../../assets/css/slide.scss\";\n    import React, { Suspense, useState } from \"react\";  \n    import ConnectButton from \"../../layout/common/connectButton\";\n    import AuthorInfo from \"./authorInfo\";\n    import NoData from \"../../layout/common/noData\";\n    import PopupModal from \"../../layout/common/popup/popupModal\";\n    import { getEventVoicesMore } from \"../../../../../actions/analyticsNew\";\n    import SectionHeading from \"../../layout/common/sectionHeading\";\n    import MultiPostMedia from \"../../layout/common/multiPostMedia\";\nimport { kFormatter } from \"../../../../../utils\";\n\n    const AuthorpostsPopup = React.lazy(() =>\n     import(\"../../layout/popup/authorpostsPopup\")\n     );\n  \n    const TopeventSekleton = React.lazy(() =>\n        import(\"../../layout/skeleton/topeventSekleton\")\n        );\n\n    const TopeventVoice = (props) => {\n   \n    const [show, setShow] = useState(false)\n\n    const handlePopup = event => {  \n      setShow(event)\n    }\n\n    const { topeventVoices, top_event_loader, selectedWallFeed, isTrial } = props;\n\n    return (\n        <>\n\n        <Card className=\"sw-card-custom gutter-b card-shadow mb-5\">\n          <SectionHeading isTrial={isTrial} title={'Top Event Voices'} selectedWallFeed={selectedWallFeed} total={topeventVoices.total} handlePopup={handlePopup} />\n          <Card.Body className=\"py-5 px-0\">\n            <Table className=\"mb-0\" responsive>\n            <thead>\n                <tr>\n                <th style={{ width: \"10%\" }}>\n                    S No.\n                </th>\n                <th style={{ width: \"30%\" }}>\n                    Name\n                </th>\n                <th style={{ width: \"20%\" }}>\n                    Followers\n                </th>\n                <th style={{ width: \"20%\" }}>\n                    Recent Posts\n                </th>\n                <th style={{ width: \"20%\" }}></th>\n                </tr>\n            </thead>\n            <tbody>\n                { top_event_loader ? <TopeventSekleton/> : topeventVoices && Object.keys(topeventVoices.data).length\n                ? topeventVoices.data.map((data,key) => {\n                    return (\n                        <tr className=\"border-top\">\n                            <td>\n                                <strong>{key+1}</strong>\n                            </td>\n                        <td>\n                         <AuthorInfo\n                            picture={data.image}\n                            authorUsername={data.author.username}\n                            link={data.links}\n                            authorName={data.author.name} \n                            networkId={data.network.id}\n                            isIcon={data.network.icon}\n                            />  \n                        </td>\n                        <td>\n                            <strong>{ kFormatter(data.postCount)}</strong>\n                        </td>\n                        <td>\n                         <MultiPostMedia postsData={data.postsData} />   \n                        </td>\n                        <td>\n                          <ConnectButton link={data.links} network={data.network.id}/>\n                        </td>\n                        </tr>\n                    );\n                    })\n                  : <NoData status={1} col={5}/>\n                }\n            </tbody>\n            </Table>\n        </Card.Body>\n        </Card>\n\n       {topeventVoices.total>5 ? \n        <PopupModal size={'xl'} showHide={show} handlePopup={handlePopup} title={'Top Event Voices'}>\n        <Suspense fallback={<></>}>\n           <AuthorpostsPopup total={topeventVoices.total} moreData={getEventVoicesMore} {...props} />\n        </Suspense>  \n        </PopupModal> : null }\n        </>\n    );\n    };\n\n    export default React.memo(TopeventVoice);;\n"],"names":["AuthorpostsPopup","React","TopeventSekleton","TopeventVoice","props","show","setShow","useState","handlePopup","event","topeventVoices","top_event_loader","selectedWallFeed","isTrial","_jsxs","_Fragment","children","Card","className","_jsx","SectionHeading","title","total","Body","Table","responsive","style","width","Object","keys","data","length","map","key","AuthorInfo","picture","image","authorUsername","author","username","link","links","authorName","name","networkId","network","id","isIcon","icon","kFormatter","postCount","MultiPostMedia","postsData","ConnectButton","NoData","status","col","PopupModal","size","showHide","Suspense","fallback","moreData","getEventVoicesMore"],"sourceRoot":""}