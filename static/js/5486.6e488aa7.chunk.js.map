{"version":3,"file":"static/js/5486.6e488aa7.chunk.js","mappings":"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","sources":["app/Layouts/Main/Moderation/ContentModal/Elements/ContentModalAside.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport ReactHtmlParser from 'react-html-parser';\nimport { Nav, Tab, Table, Badge, Image, Button } from 'react-bootstrap';\nimport { GET_NETWORK_ICON, MEDIA_REPLACE_URL, GET_NETWORK_NAME, SENTIMENTS_CALC } from '../../../../../../utils';\n// import { postPostUpdateAction, loadAssetsDataWithDispatch, tagsFilter } from '../../../../Services/Actions/assetsActions'\nimport { baseUrl, FontAwesomeIcon } from '../../../../../CommonComponents/AssetsHelper';\nimport Author from '../../../../../CommonComponents/Author/Author';\nimport Rating from '../../../../../CommonComponents/Rating'; \n\nclass ContentModalAside extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            //tagString:['#macdonald', 'Restaurant', 'Burger', '#macdonaldUSA', 'California', '#starbucks', 'Restaurant'],\n            descriptionEditable: false,\n            addTagButton: true,\n            //tagInputValue : ''\n            tagString: [],\n            newTag: \"\",\n            listTags: [],\n            selectedOption: null,\n            content: \"\",\n            changesStatus: false\n        };\n\n        this.editorEnable = React.createRef();\n        this.editorEnableButton = React.createRef();\n    }\n\n    onClickToRemoveTag = (index) => event => {\n        let { tagString } = this.state;\n        tagString.splice(index, 1)\n        this.setState({ tagString, changesStatus: true })\n\n    }\n\n    componentWillMount() {\n        const { tagList } = this.props\n        if (tagList && tagList.length > 0) {\n            var listTags = []\n            tagList.map((item) => {\n                listTags.push({ value: item, label: item })\n            })\n            this.setState({ listTags })\n\n\n        }\n\n    }\n\n    addTagButtonValue = () => {\n        this.setState({\n            addTagButton: false\n        })\n    }\n\n    // tagInputValueFun = (value) => {\n    //     this.setState({\n    //         tagInputValue : value\n    //     })\n    // }\n\n    descriptionToggle() {\n        this.setState({\n            descriptionEditable: true\n        })\n    }\n\n    componentDidMount() {\n        document.addEventListener('click', this.handleOutsideClick);\n        this.setInitialState();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.modalData !== this.props.modalData) {\n            this.setInitialState();\n        }\n    }\n    setInitialState = () => {\n        const { modalData } = this.props\n        if (modalData && Object.keys(modalData).length > 0) {\n            if (modalData.tags && String(modalData.tags).length > 0) this.setState({ tagString: String(modalData.tags).split(\",\"), content: modalData.postcontent })\n            else this.setState({ tagString: [], content: modalData.postcontent })\n        }\n        this.setState({\n            textAreaHeight: (this.state.content.length / 35).toFixed() * 20\n        })\n    }\n\n    handleOutsideClick = (event) => {\n        if (this.editorEnable && this.editorEnable.current && !this.editorEnable.current.contains(event.target) && (this.editorEnableButton && !this.editorEnableButton.current.contains(event.target)) && this.editorEnableButton && !this.editorEnableButton.current.contains(event.target) !== null) {\n            this.setState({\n                descriptionEditable: false\n            })\n        } else {\n            if (this.editorEnable && this.editorEnable.current && (!this.editorEnable.current.contains(event.target) && this.editorEnable.current.contains(event.target) !== null)) {\n                this.setState({\n                    descriptionEditable: true\n                })\n            }\n        }\n    }\n\n    onClickNewAddTag = event => {\n        const { newTag, tagString } = this.state;\n        const { modalData } = this.props\n\n        if (event.key === 'Enter' || event.keyCode === 13) {\n            if (newTag && String(newTag).length >= 3) {\n                tagString.push(newTag)\n                this.setState({ tagString, newTag: \"\", selectedOption: null, changesStatus: true, addTagButton: true })\n            }\n            else {\n\n            }\n        }\n    }\n\n    addNewTag = event => this.setState({ newTag: event.target.value, changesStatus: true })\n\n    onClickToSave = event => {\n        const { tagString } = this.state;\n        const { modalData } = this.props;\n        if (tagString && tagString.length > 0) {\n            // this.props.postAddTag({\n            //     \"postId\": String(modalData.id),\n            //     \"tags\": tagString.join(\",\")\n            // }, () => this.props.loadAssetsDataWithDispatch()) \n        }\n\n    }\n\n    setNewTags = (selectedOption) => {\n        if (selectedOption && selectedOption.value) this.setState({ newTag: selectedOption.value, selectedOption })\n        else this.setState({ newTag: \"\", selectedOption: null })\n\n\n    };\n\n    onChangeContent = event => {\n        this.setState({ content: event.target.value, changesStatus: true })\n    }\n    onChangeTag = event => {\n        this.setState({ newTag: event.target.value })\n    }\n    onSaveChanges = event => {\n        const { modalData } = this.props;\n        const { tagString, content } = this.state;\n        const data = {\n            \"action\": \"4\",\n            \"source\": String(modalData.collection),\n            \"destination\": String(modalData.collection),\n            \"postId\": String(modalData.id),\n            \"postFile\": modalData.postFile,\n            \"tags\": tagString.join(\",\"),\n            \"content\": content\n        }\n        // this.props.postPostUpdateAction(data, () => {\n        //     this.props.loadAssetsDataWithDispatch()\n        //     this.setState({ descriptionEditable: false, addTagButton: true, changesStatus: false })\n        //     //this.props.editMediaCallback(false)\n        // })\n\n    }\n    onFilterWithTag = (value) => event => {\n        const { modalCallback, tagsFilter } = this.props\n        tagsFilter(value)\n        setTimeout(() => modalCallback(false), 200)\n    }\n\n    contentHeight = (content) => {\n        var contentLines = (content.length / 35)\n        var contentLinesInt = Math.round(contentLines);\n        return contentLines >= contentLinesInt ? (contentLinesInt + 1) * 20 + 20 : contentLinesInt * 20 + 20\n    }\n\n    render() {\n        const { descriptionEditable, addTagButton, tagString, content, changesStatus, newTag } = this.state\n        const { modalData, networkData, currentIndex, clickToPostStatus } = this.props\n        const modifiedNetworkId = modalData.networkId == 18 ? 2 : modalData.networkId\n        const socialNetwork = networkData && networkData.length > 0 ? networkData.filter((network) => network.id == modifiedNetworkId) : []\n        return <div id=\"modal_aside_\" className='m_sideCont_scroll_' defaultActiveKey=\"tag_product\">\n            <div className='f-between flex-column h-100'>\n\n\n                <div className={`position-relative w-100 content-overflow`}>\n                    <h6 className='border-bottom text-uppercase p-3 mb-0'> Post Details </h6>\n                    <div className='p-3'>\n                        <Table className=\"table-borderless mb-0\">\n                            <tbody>\n                                <tr>\n                                    <td className=\"py-xxl-2 py-1 px-0 min-w-100 w-35\"><span className=\"text-muted\">Author</span></td>\n                                    <td className=\"py-xxl-2 py-1 px-0 w-65\">\n                                        <div className=\"d-flex align-items-center mr-2 cursor-pointer\" onClick={modalData.link ? event => window.open(modalData.link, \"_blank\") : null}>\n                                            <Author className={'symbol-28 rounded-circle flex-shrink-0 me-2 overflow-hidden'}\n                                                imageSize={28}\n                                                symbolClass={'symbol-28 f-center text-white fs-6'}\n                                                name={ReactHtmlParser(modalData.username)} profileUrl={MEDIA_REPLACE_URL(modalData.picture)} networkId={modalData.networkId ? modalData.networkId : 0} />\n                                            <div>\n                                                <p className=\" mb-0 text-break fw-bold\">{ReactHtmlParser(modalData.name)}</p>\n                                                <small className=\"mb-0 text-muted text-break\">@{modalData.username}</small>\n                                            </div>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td className=\"py-xxl-2 py-1 px-0 min-w-100 w-35\"><span className=\"text-muted\">Network</span></td>\n                                    <td className=\"py-xxl-2 py-1 px-0 w-65\">\n                                        <div className=\"d-flex align-items-center\">\n                                            <span className=\"me-2 d-flex\">\n                                                {modalData.networkId != 0 ? <Image className=\"img-fluid\" src={baseUrl(`icons/social-icons/${GET_NETWORK_ICON(modalData.networkId)}.svg`)} height={18} width={18} alt={modalData.networkId ? modalData.networkId : 0} /> : ''}\n                                            </span>\n                                            <span className=\"\">{modalData.networkId == 0 ? '' : GET_NETWORK_NAME(modalData.networkId)}</span>\n                                        </div>\n                                    </td>\n                                </tr>\n                                {modalData.networkId != 29 ? <tr>\n                                    <td className=\"py-xxl-2 py-1 px-0 min-w-100 w-35\"><span className=\"text-muted\">Feed name</span></td>\n                                    <td className=\"py-xxl-2 py-1 px-0 w-65 text-start\">\n                                        {modalData.feedname && modalData.networkId == 32 ?\n                                            <Image className=\"img-fluid me-2\" src={baseUrl(`icons/social-icons/${GET_NETWORK_ICON(32)}.svg`)} height={18} width={18} alt=\"Chrome\" />\n                                            : null}\n                                        <span className=\"text-break\">{modalData.feedname ? ReactHtmlParser(modalData.feedname) :\n                                            modalData.networkId == 0 ? <><Image className=\"img-fluid\" src={baseUrl(`icons/social-icons/${GET_NETWORK_ICON(0)}.svg`)} height={18} width={18} alt={0} /> Manual Upload </>\n                                                : '--'}</span>\n                                    </td>\n                                </tr>:''}\n                                {/* <tr>\n                                                    <td className=\"py-xxl-2 py-1 px-0 min-w-100 w-25\"><span className=\"text-muted\">Created</span></td>\n                                                    <td className=\"py-xxl-2 py-1 px-0 w-75\"> <span className=\" text-break\">{moment(modalData.created).utcOffset(0).format(\"DD MMM YYYY hh:mmA\")}</span></td>\n                                                </tr>\n                                                <tr>\n                                                    <td className=\"py-xxl-2 py-1 px-0 min-w-100 w-25\"><span className=\"text-muted\">Modified</span></td>\n                                                    <td className=\"py-xxl-2 py-1 px-0 w-75\"> <span className=\" text-break\">{moment(modalData.modified).utcOffset(0).format(\"DD MMM YYYY hh:mmA\")}</span></td>\n                                                </tr> */}\n                                {\n                                    modalData.ugcstatus ? <>\n                                        {modalData.ugcstatus == 2 ? <tr>\n                                            <td className=\"py-xxl-2 py-1 px-0 min-w-100 w-25\"><span className=\"text-muted\">Rights</span></td>\n                                            <td className=\"py-xxl-2 py-1 px-0 w-75\">\n                                                <div className=\"d-flex align-items-center flex-wrap text-success\">\n                                                    <span className=\"fs-6 me-1\">\n                                                        <FontAwesomeIcon type={'solid'} icon={'user-check'} />\n                                                    </span>\n                                                    <span className=\"fw-medium\">Request Approved</span>\n                                                </div>\n                                            </td>\n                                        </tr> : modalData.ugcstatus == 1 ? <tr>\n                                            <td className=\"py-xxl-2 py-1 px-0 min-w-100 w-25\"><span className=\"text-muted\">Rights</span></td>\n                                            <td className=\"py-xxl-2 py-1 px-0 w-75\">\n                                                <div className=\"d-flex align-items-center flex-wrap text-warning\">\n                                                    <span className=\"fs-6 me-1\">\n                                                        <FontAwesomeIcon type={'solid'} icon={'user-clock'} />\n                                                    </span>\n                                                    <span className=\"fw-medium\">Request Pending</span>\n                                                </div>\n                                            </td>\n                                        </tr> : modalData.ugcstatus == 3 ? <tr>\n                                            <td className=\"py-xxl-2 py-1 px-0 min-w-100 w-25\"><span className=\"text-muted\">Rights</span></td>\n                                            <td className=\"py-xxl-2 py-1 px-0 w-75\">\n                                                <div className=\"d-flex align-items-center flex-wrap text-danger\">\n                                                    <span className=\"fs-6 me-1\">\n                                                        <FontAwesomeIcon type={'solid'} icon={'user-xmark'} />\n                                                    </span>\n                                                    <span className=\"fw-medium\">Request Rejected</span>\n                                                </div>\n                                            </td>\n                                        </tr> : null}\n                                    </> : null\n                                }\n                                \n                                {modalData.recommendation && (modalData.type == 2 || modalData.type == 4) ?\n                                    <tr>\n                                        <td className=\"py-xxl-2 py-1 px-0 min-w-100 w-25\">\n                                            <p className=\"text-muted mb-1 text-nowrap me-2\">Ai Recommendation </p>\n                                        </td>\n                                        <td className=\"py-xxl-2 py-1 px-0 w-75\">\n                                            <div className=\"d-flex align-items-start\">\n                                                <div className={`h-12px w-12px rounded-circle d-flex flex-shrink-0 mt-1 ${modalData.recommendation.type == 1 ? 'bg-success' : modalData.recommendation.type == 2 ? 'bg-warning' : modalData.recommendation.type == 3 ? 'bg-danger' : null}`}></div>\n                                                <span className=\" text-break ps-1\">{modalData.recommendation.label} ({modalData.recommendation.score}%)</span>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    : null}\n                                {modalData.rating > 0 && modalData.type != 1 ? <tr>\n                                    <td className=\"py-xxl-2 py-1 px-0 min-w-100 w-25\"><span className=\"text-muted\">Rating</span></td>\n                                    <td className=\"py-xxl-2 py-1 px-0 w-75\">\n                                        <div className='d-flex justify-content-start'>\n                                            <Rating className={'fs-6'} iconClass=\"me-1\" rating={modalData.rating} />\n                                        </div>\n                                    </td>\n                                </tr> : null}\n                                {parseInt(modalData.sentiment) > 0 ? <tr>\n                                    <td className=\"py-xxl-2 py-1 px-0 min-w-100 w-25\"><span className=\"text-muted\">Post Sentiment</span></td>\n                                    <td className=\"py-xxl-2 py-1 px-0 w-75\"> <span className=\" text-break\">\n                                        <span className=\"d-flex fs-8  text-break\">\n                                            <div className='h-16px w-16px me-1 d-flex'>\n                                                <Image className='img-fluid' src={baseUrl(`icons/emoji/emoji${SENTIMENTS_CALC(modalData.sentiment).item}.svg`)} height={16} width={16} alt='' />\n                                            </div>\n                                            {SENTIMENTS_CALC(modalData.sentiment).label}\n                                        </span>\n\n                                    </span></td>\n                                </tr> : null}\n                                <tr>\n                                    <td className=\"py-xxl-2 py-1 px-0 min-w-100 w-35\"><span><Image className='img-fluid me-1' src={baseUrl(`icons/svg-icons/truesense.png`)} height={18} width={100} alt='' /></span></td>\n                                </tr>\n                            </tbody>\n                        </Table>\n                    </div>\n\n                    {tagString && tagString.length > 0 ? <div className='p-3 '>\n                        <h6 className=\"border-bottom text-uppercase pb-3 mb-3\">Tag</h6>\n                        <div className=\"tags-group\">\n                            {\n                                tagString.map((Item, index) => {\n                                    return Item && String(Item).length > 0 ? <Badge key={index} bg=\"\" className={`rounded-pill btn btn-outline-secondary ${index == 99999 ? 'border-gradient' : 'border'}`}>\n                                        <span className=''>{Item}</span>\n                                    </Badge> : null\n\n                                })\n                            }\n                        </div>\n                    </div> : null}\n                    <div className='p-3 '>\n                        <h6 className=\"border-bottom text-uppercase pb-3 mb-3\">Description</h6>\n                        <div>\n                            <p style={{ whiteSpace: 'pre-line', wordBreak: 'break-word' }}>{ReactHtmlParser(content)}</p>\n                        </div>\n                    </div>\n                 </div>\n\n\n                <div className=\"d-flex align-items-center p-3 border-top w-100\">\n                    <div className=\"w-50 me-1\"> <button type=\"button\" className={`w-100 btn btn-public btn-sm ${modalData.status == 1 ? 'disabled' : ''}`} onClick={modalData.status != 1 ? clickToPostStatus(currentIndex, modalData.postId, 1, (modalData.pin > 0 || modalData.highlight > 0)) : null}>Public</button></div>\n                    <div className=\"w-50 ms-1\"><button type=\"button\" className={`w-100 btn btn-private btn-sm ${modalData.status == 2 ? 'disabled' : ''}`} onClick={modalData.status != 2 ? clickToPostStatus(currentIndex, modalData.postId, 2, (modalData.pin > 0 || modalData.highlight > 0)) : null}>Private</button></div>\n                </div>\n            </div>\n        </div>\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        networkData: state?.networks?.networkData,\n        tagList: state?.tags?.tagList\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        // postAddTag: (data, callback) => dispatch(postAddTag(data, callback)),\n        // postPostUpdateAction: (data, calback) => dispatch(postPostUpdateAction(data, calback)),\n        // loadAssetsDataWithDispatch: () => dispatch(loadAssetsDataWithDispatch()),\n        // tagsFilter: (refId) => dispatch(tagsFilter(refId)),\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ContentModalAside);\n"],"names":["ContentModalAside","Component","constructor","props","super","onClickToRemoveTag","index","event","tagString","this","state","splice","setState","changesStatus","addTagButtonValue","addTagButton","setInitialState","modalData","Object","keys","length","tags","String","split","content","postcontent","textAreaHeight","toFixed","handleOutsideClick","editorEnable","current","contains","target","editorEnableButton","descriptionEditable","onClickNewAddTag","newTag","key","keyCode","push","selectedOption","addNewTag","value","onClickToSave","setNewTags","onChangeContent","onChangeTag","onSaveChanges","collection","id","postFile","join","onFilterWithTag","modalCallback","tagsFilter","setTimeout","contentHeight","contentLines","contentLinesInt","Math","round","listTags","React","componentWillMount","tagList","map","item","label","descriptionToggle","componentDidMount","document","addEventListener","componentDidUpdate","prevProps","render","networkData","currentIndex","clickToPostStatus","modifiedNetworkId","networkId","filter","network","_jsx","className","defaultActiveKey","children","_jsxs","Table","onClick","link","window","open","Author","imageSize","symbolClass","name","ReactHtmlParser","username","profileUrl","MEDIA_REPLACE_URL","picture","Image","src","baseUrl","GET_NETWORK_ICON","height","width","alt","GET_NETWORK_NAME","feedname","_Fragment","ugcstatus","FontAwesomeIcon","type","icon","recommendation","score","rating","Rating","iconClass","parseInt","sentiment","SENTIMENTS_CALC","Item","Badge","bg","style","whiteSpace","wordBreak","status","postId","pin","highlight","connect","_state$networks","_state$tags","networks","dispatch"],"sourceRoot":""}