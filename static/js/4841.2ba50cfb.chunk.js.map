{"version":3,"file":"static/js/4841.2ba50cfb.chunk.js","mappings":"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","sources":["app/Layouts/Main/Analytics/layout/skeleton/imageSkeleton.js","app/Layouts/Main/Analytics/activityHub/display/index.js","app/Layouts/Main/Analytics/layout/common/sectionHeading.js"],"sourcesContent":["import React from \"react\";\nimport { baseUrl } from \"../../../../../../utils\";\n\nconst ImageSkeleton = (props) => {\n  return (\n    <div className=\"py-1 text-center\" style={{ backgroundImage: `url(${baseUrl(`dashboard/analytic/content-analytis-5.svg`)})` }}></div>\n  );\n};\n\nexport default React.memo(ImageSkeleton)","import React, { Component, Suspense } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  getScreenAnalyticsData,\n} from \"../../../../../../actions/analyticsAction\";\nimport { Card, CardBody } from \"react-bootstrap\";\nimport ImageSkeleton from \"../../layout/skeleton/imageSkeleton\";\nimport SectionHeading from \"../../layout/common/sectionHeading\";\n\nconst TopCard = React.lazy(() =>\n  import(\"../../layout/common/topCard\")\n)\nconst Tabheader = React.lazy(() =>\n  import(\"../../layout/common/subheader/tabHeader\")\n)\nconst AssetsTypeAreaChart = React.lazy(() =>\n  import(\"../../layout/common/graph/assetsTypeAreaChart\")\n);\nconst ScreensOverview = React.lazy(() =>\n  import(\"./components/screensOverview\")\n);\n\nclass Display extends Component {  \n  componentDidMount() {\n    const { getScreenAnalytics, analyticsStatus, selectedWallFeed  } = this.props;\n      getScreenAnalytics(!selectedWallFeed?.length ? true : analyticsStatus)\n    }\n\n  render() {\n    const {\n      get_screen_overview_data,\n      get_screen_overview_data_loader,\n      get_screen_analytics_data,\n      get_screen_analytics_loader\n    } = this.props.analyticsRecords;\n\n\n    return (\n      <>\n            <div className=\"\">\n              <Suspense fallback={<></>}>\n                <Tabheader />\n               </Suspense>  \n              <div className=\"row\">\n                <Suspense fallback={<></>}>\n                  <TopCard loader={get_screen_analytics_loader} data={get_screen_analytics_data} col={2} res={6}  />\n                </Suspense>  \n              </div>\n\n              <Suspense fallback={<></>}>\n                <ScreensOverview\n                  loader={get_screen_overview_data_loader}\n                  {...get_screen_overview_data}\n                />\n              </Suspense>\n\n              <Card className=\"sw-card-custom gutter-b p-3 card-shadow\">\n                <SectionHeading  section={3}  title={'Content Analytics'} />\n                <CardBody className=\"p-0\">\n                  { get_screen_overview_data_loader ? (<ImageSkeleton img={3} />) : (\n                    <Suspense fallback={<></>}>\n                        <AssetsTypeAreaChart\n                        key={get_screen_overview_data_loader}\n                        get_screen_overview_data={get_screen_overview_data}\n                        type={\"bar\"}\n                      />\n                    </Suspense>\n                  )}\n                </CardBody>\n              </Card>\n            </div>\n      </>\n    );\n  }\n}\n\n\nconst widgetstateProps = (state) => {  \n  return {\n    analyticsRecords: state.analyticsRecords,\n    selectedWallFeed: state.analyticwall?.selectedWallFeed?.feeds,\n    detail: state.appsMore.detail,\n    analyticsStatus : state.analyticsStatus.trialAccessAPI\n  };\n};\n\nconst widgetDispatchProps = (dispatch) => {\n  return {\n    getScreenAnalytics: (isTrial) => dispatch(getScreenAnalyticsData(isTrial)),\n  };\n};\n\nexport default connect(widgetstateProps, widgetDispatchProps)(Display);\n","import { Button, CardHeader, CardTitle } from \"react-bootstrap\";\nimport { baseUrl } from \"../../../../../../utils\";\n\nconst SectionHeading = (props) => {\n\n  const { title, section, cardTitleCss, icon, iconFull, selectedWallFeed, moreData, total, handlePopup, headingMargin, isDashboard,isTrial } = props\n\n  // && selectedWallFeed && Object.keys(selectedWallFeed).length\n\n  return (\n    <CardHeader className={`${section==1 ? 'p-0 border-0' : section==2 ? 'p-3' : section==3 ? 'p-0 pb-3' : 'px-3 pt-3 border-0 pb-0'}`}>\n      <CardTitle className={cardTitleCss ? cardTitleCss : `mb-0 d-flex align-items-center justify-content-between ${isDashboard ? isDashboard : \"\"}`}>\n        <h6 className={`card-label font-weight-bolder ${!headingMargin ? 'm-0' : 'm-0'} `}>\n         { icon ? <img src={baseUrl(`dashboard/analytic/${icon}.svg`)}  height={\"20px\"} width={\"20px\"} /> : null }\n         { iconFull ? <img src={iconFull}  height={\"20px\"} width={\"20px\"} />  : null }   {title}</h6>\n         { !isTrial && ((total > 5) || moreData) ? ( <Button variant=\"link\" className=\"p-0\" onClick={() => handlePopup(true)} > See More </Button> ) : null\n        }\n      </CardTitle>\n    </CardHeader>\n  );\n};\n\nexport default SectionHeading;\n"],"names":["ImageSkeleton","props","_jsx","className","style","backgroundImage","baseUrl","React","TopCard","Tabheader","AssetsTypeAreaChart","ScreensOverview","Display","Component","componentDidMount","getScreenAnalytics","analyticsStatus","selectedWallFeed","this","length","render","get_screen_overview_data","get_screen_overview_data_loader","get_screen_analytics_data","get_screen_analytics_loader","analyticsRecords","_Fragment","children","_jsxs","Suspense","fallback","loader","data","col","res","Card","SectionHeading","section","title","CardBody","img","type","connect","state","_state$analyticwall","_state$analyticwall$s","analyticwall","feeds","detail","appsMore","trialAccessAPI","dispatch","isTrial","getScreenAnalyticsData","cardTitleCss","icon","iconFull","moreData","total","handlePopup","headingMargin","isDashboard","CardHeader","CardTitle","src","height","width","Button","variant","onClick"],"sourceRoot":""}