{"version":3,"file":"static/js/2087.66de247f.chunk.js","mappings":"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","sources":["app/Layouts/Main/Analytics/layout/popup/authorpostsPopup.js"],"sourcesContent":["import React, { Component, Suspense } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Table } from \"react-bootstrap\";\nimport { kFormatter, dateFormat } from \"../../utils\"; \nimport { paginate } from '../../../../../CommonComponents/Paginate';\nimport Paggination from \"../common/popup/paggination\";\nimport PopupSearch from \"../common/popup/popupSearch\";\nimport ConnectButton from \"../common/connectButton\"; \nimport MultiPostMedia from \"../common/multiPostMedia\";\nimport AuthorInfo from \"../../content/components/authorInfo\";\nimport DataNotFound from \"../common/DataNotFound\";\nconst LeaderbordSkeleton = React.lazy(() =>\n  import(\"../skeleton/leaderbordSkeleton\")\n);\n\n\nclass AuthorpostsPopup extends Component {\n  state = {\n    fetchRecord: null,\n    isLoading: true,\n    total: 0,\n    limit: 10,\n    offset: 0,\n    paginateData: {},\n    currentPage: 1,\n    maxPage: 10,\n    username: null\n  }\n\n  componentDidMount() {\n     const { total } = this.props;\n     const { limit, currentPage, maxPage } = this.state;\n      if (total)  this.setState({ total: total, paginateData: paginate(total, currentPage, limit, maxPage) }, () => this.onLoadFilterData())\n   }\n\n\n  onLoadFilterData = (isSearch=0) => { \n    \n    const { analyticwall, total, moreData, isDashboard, selectedWalls , startDate, endDate} = this.props;\n    const { selectedWallFeed, dateFilter, selectedFeed } = analyticwall;\n    const { currentPage, limit, offset, username, maxPage } = this.state;\n\n    let wallData = isDashboard ? selectedWalls: selectedWallFeed?.wall?.id;\n    let startDateNew = isDashboard ? startDate :dateFilter.startDate;\n    let endDateNew = isDashboard ? endDate:dateFilter.endDate;\n\n    let feedIDs = [];\n    if (selectedFeed && selectedFeed.length > 0) {\n      selectedFeed.map((fItem) => {\n        feedIDs.push(fItem.value);\n      })\n    }\n\n    this.setState({ isLoading: true })\n       moreData(wallData, dateFormat(startDateNew), dateFormat(endDateNew), feedIDs.join(), isSearch ? username && username.length > 0 ? total : limit  :  offset, isSearch ? username.length > 0 ? 0 : offset : limit, 0, username)\n      .then((response) => {\n      const { responseData } = response.data;\n\n        if(!isSearch) this.setState({ fetchRecord: responseData.data, isLoading: false })\n          else\n        this.setState({ total: responseData.total, paginateData: paginate(responseData.total, currentPage, limit, maxPage), fetchRecord: responseData.data, isLoading: false })\n    })\n      .catch((error) => {\n        console.error(\"LAYOUT ISSUE\", error)\n      });\n   }   \n\n\n  managePagging=(pageClick,currentPage=0,total=0,page=0,limit=0,maxPage=0,offset=0)=>{\n      if(pageClick==1)\n          this.setState({ currentPage: currentPage });\n          else if(pageClick==2)\n          this.setState(\n            { paginateData: paginate(total, page, limit, maxPage), offset: offset },\n            () => this.onLoadFilterData()\n        );\n         else if(pageClick==3)\n          this.setState(\n            {\n                currentPage: page,\n                paginateData: paginate(total, page, limit, maxPage),\n                offset: offset,\n            },\n            () => this.onLoadFilterData()\n            );\n        else if(pageClick==4)\n        this.setState(\n          {\n              limit: limit,\n              paginateData: paginate(total, currentPage, limit, maxPage),\n              offset: offset,\n          },\n          () => this.onLoadFilterData()\n        );\n     }\n\n\n  updateSearchText = (value) => {\n    this.setState({ username: value, currentPage: 1 }, () => this.onLoadFilterData(1))\n  }\n  \n  render() {\n    const {  analyticsStatus, isPdfDownloading, maxPage, hideFollwers  } = this.props;\n    const { isLoading, fetchRecord, total, limit, paginateData, currentPage } = this.state;\n\n    return (\n      <div className=\"influential_contributors_custom_modal px-5\">\n        <PopupSearch isPdfDownloading={isPdfDownloading} analyticsStatus={analyticsStatus} updateSearchText={this.updateSearchText}/>\n        <div className=\"influential-data-list sw_theme \">\n        <Table responsive>\n                <thead>\n                  <tr>\n                    <th style={{ width: \"10%\" }}>\n                      S No.\n                    </th>\n                    <th style={{ width: \"25%\" }}>\n                      Name\n                    </th>\n                   { ![1].includes(hideFollwers) ?  \n                    <th style={{ width: \"15%\" }}>\n                      Followers\n                    </th> : null }\n                    <th style={{ width: \"10%\" }}>\n                      Posts\n                    </th>\n                    <th style={{ width: \"25%\" }}>\n                      Recent Posts\n                    </th>\n                    <th style={{ width: \"15%\" }}></th>\n                  </tr>\n                </thead>\n                <tbody>\n                    {\n                      isLoading ? <Suspense fallback={<></>}> <LeaderbordSkeleton/> </Suspense> : \n                      (fetchRecord && fetchRecord.length > 0) ? fetchRecord.map((mItem, mIndex) =>  <tr>\n                      <td>{mIndex+1}</td>\n                      <td>\n                        <AuthorInfo picture={mItem.image} authorUsername={mItem.author.username} isIcon={mItem.network.icon} authorName={mItem.author.name}  networkId={mItem.networkId} link={mItem.links}/>\n                      </td>\n                      { ![1].includes(hideFollwers) ?  \n                      <td>\n                        <p className={`mb-0 ${parseInt(mItem.author.follower) > 0 ? '' : 'd-none'}`}><strong className=\"text-dark\">{kFormatter(Math.round(mItem.author.follower))}</strong> {mItem.author.follower && parseInt(mItem.author.follower) > 1 ? `Followers` : `Follower`}</p>\n                      </td> : null }\n                      <td>\n                        <p className={`mb-lg-3 mt-sm-2 mb-0 ${parseInt(mItem.postCount) > 0 ? '' : 'd-none'}`}><strong className=\"text-dark\">{kFormatter(Math.round(mItem.postCount))}</strong> {mItem.postCount && parseInt(mItem.postCount) > 1 ? `Posts` : `Post`}</p>\n                      </td>\n                      <td>\n                        <MultiPostMedia postsData={mItem.postsData} /> \n                      </td>\n                      <td>\n                        <div className=\"conn_status connnected\">\n                          <ConnectButton link={mItem.links} network={mItem.network.id} />\n                        </div>\n                      </td>\n                    </tr>\n                      ) : <tr>\n                          <td colspan={6}> <DataNotFound />\n                       </td></tr>\n                   }\n                 \n                </tbody>\n              </Table>\n\n        </div>\n          <Paggination isLoading={isLoading} total={total} paginateData={paginateData} maxPage={maxPage} currentPage={currentPage} limit={limit}  managePagging={this.managePagging} />\n       </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {   \n  return {\n    analyticwall: state.analyticwall,\n  }\n}\n\nexport default connect(mapStateToProps)(AuthorpostsPopup);"],"names":["LeaderbordSkeleton","React","AuthorpostsPopup","Component","constructor","_this","arguments","this","state","fetchRecord","isLoading","total","limit","offset","paginateData","currentPage","maxPage","username","onLoadFilterData","_selectedWallFeed$wal","isSearch","length","undefined","analyticwall","moreData","isDashboard","selectedWalls","startDate","endDate","props","selectedWallFeed","dateFilter","selectedFeed","wallData","wall","id","startDateNew","endDateNew","feedIDs","map","fItem","push","value","setState","dateFormat","join","then","response","responseData","data","paginate","catch","error","console","managePagging","pageClick","page","updateSearchText","componentDidMount","render","analyticsStatus","isPdfDownloading","hideFollwers","_jsxs","className","children","_jsx","PopupSearch","Table","responsive","style","width","includes","Suspense","fallback","_Fragment","mItem","mIndex","AuthorInfo","picture","image","authorUsername","author","isIcon","network","icon","authorName","name","networkId","link","links","parseInt","follower","kFormatter","Math","round","postCount","MultiPostMedia","postsData","ConnectButton","colspan","DataNotFound","Paggination","connect"],"sourceRoot":""}