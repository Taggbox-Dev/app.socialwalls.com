{"version":3,"file":"static/js/4096.450f3c37.chunk.js","mappings":"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","sources":["app/Layouts/Main/Analytics/layout/popup/screenOverview.js"],"sourcesContent":["import React, { Component, Suspense } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Table } from \"react-bootstrap\";\nimport { paginate } from '../../../../../CommonComponents/Paginate'; \nimport Paggination from \"../common/popup/paggination\";\nimport PopupSearch from \"../common/popup/popupSearch\";\nimport { getScreenOverviewMore } from \"../../../../../../actions/analyticsAction\";\nimport DataNotFound from \"../common/DataNotFound\";\nconst LeaderbordSkeleton = React.lazy(() =>\n  import(\"../skeleton/leaderbordSkeleton\")\n);\n\n\nclass ScreenOverview extends Component {\n  state = {\n    fetchRecord: null,\n    isLoading: true,\n    total: 0,\n    limit: 10,\n    offset: 0,\n    paginateData: {},\n    currentPage: 1,\n    maxPage: 10,\n    username: null\n  }\n\n  componentDidMount() {\n     const { total } = this.props;\n     const { limit, currentPage, maxPage } = this.state;\n      if (total)  this.setState({ total: total, paginateData: paginate(total, currentPage, limit, maxPage) }, () => this.onLoadFilterData())\n   }\n\n\n  onLoadFilterData = (isSearch=0) => { \n    \n    const { analyticwall, total } = this.props;\n    const { selectedWallFeed  } = analyticwall;\n    const { currentPage, limit, offset, username, maxPage } = this.state;\n\n    let wallData = selectedWallFeed?.wall?.id;\n    \n\n    this.setState({ isLoading: true })\n    getScreenOverviewMore(wallData, isSearch ? username && username.length > 0 ? total : limit  :  offset, isSearch ? username.length > 0 ? 0 : offset : limit, 0, username)\n      .then((response) => {\n      const { responseData } = response.data;\n\n        if(!isSearch) this.setState({ fetchRecord: responseData.data, isLoading: false })\n          else\n        this.setState({ total: responseData.total, paginateData: paginate(responseData.total, currentPage, limit, maxPage), fetchRecord: responseData.data, isLoading: false })\n    })\n      .catch((error) => {\n        console.error(\"LAYOUT ISSUE\", error)\n      });\n   }   \n\n\n  managePagging=(pageClick,currentPage=0,total=0,page=0,limit=0,maxPage=0,offset=0)=>{\n      if(pageClick==1)\n          this.setState({ currentPage: currentPage });\n          else if(pageClick==2)\n          this.setState(\n            { paginateData: paginate(total, page, limit, maxPage), offset: offset },\n            () => this.onLoadFilterData()\n        );\n         else if(pageClick==3)\n          this.setState(\n            {\n                currentPage: page,\n                paginateData: paginate(total, page, limit, maxPage),\n                offset: offset,\n            },\n            () => this.onLoadFilterData()\n            );\n        else if(pageClick==4)\n        this.setState(\n          {\n              limit: limit,\n              paginateData: paginate(total, currentPage, limit, maxPage),\n              offset: offset,\n          },\n          () => this.onLoadFilterData()\n        );\n     }\n\n\n  updateSearchText = (value) => {\n    this.setState({ username: value, currentPage: 1 }, () => this.onLoadFilterData(1))\n  }\n  \n  render() {\n    const {  analyticsStatus, isPdfDownloading, maxPage} = this.props;\n    const { isLoading, fetchRecord, total, limit, paginateData, currentPage } = this.state;\n\n    return (\n      <div className=\"influential_contributors_custom_modal px-5\">\n        <PopupSearch placeholder={\"Search...\"} isPdfDownloading={isPdfDownloading} analyticsStatus={analyticsStatus} updateSearchText={this.updateSearchText}/>\n        <div className=\"influential-data-list sw_theme \">\n        <Table responsive>\n                <thead>\n                  <tr>\n                    <th style={{ width: \"10%\" }}>\n                      S No.\n                    </th>\n                    <th style={{ width: \"15%\" }}>\n                      Screen Name\t\n                    </th>\n                     <th style={{ width: \"15%\" }}>\n                     Screen IP\t\n                    </th>\n                    <th style={{ width: \"15%\" }}>\n                      Device Location\t\n                    </th>\n                    <th style={{ width: \"15%\" }}>\n                      Status\t\n                    </th>\n                    <th style={{ width: \"25%\" }}>\n                      Last Refresh Time\t\n                    </th>\n                    <th style={{ width: \"15%\" }}>\n                      Daily Active Hours\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                    {\n                      isLoading ? <Suspense fallback={<></>}> <LeaderbordSkeleton isScreen={1}/> </Suspense> : \n                      (fetchRecord && fetchRecord.length > 0) ? fetchRecord.map((mItem, mIndex) =>  <tr>\n                      <td>{mIndex+1}</td>\n                      <td>\n                        {mItem.screenName}\n                      </td>\n\n                      <td>\n                        {mItem.screenIp}\n                      </td>\n\n                      <td>\n                        {mItem.deviceLocation}\n                      </td>\n\n                      <td>\n                        <label className={`mx-width-80 alert ${mItem.status==\"Inactive\" ? 'alert-danger' : 'alert-success'} m-0 rounded-0 px-3 py-1`}>\n                            {mItem.status}\n                        </label>\n                      </td>\n\n                      <td>\n                        {mItem.lastRefreshTime}\n                      </td>\n\n                      <td>\n                        {mItem.hours} Hours\n                      </td>\n                    \n                    </tr>\n                      ) :  <tr>\n                             <td colspan={7}> <DataNotFound />\n                          </td></tr>\n                    }\n                 \n                </tbody>\n              </Table>\n\n        </div>\n          <Paggination isLoading={isLoading} total={total} paginateData={paginateData} maxPage={maxPage} currentPage={currentPage} limit={limit}  managePagging={this.managePagging} />\n       </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {   \n  return {\n    analyticwall: state.analyticwall,\n  }\n}\n\nexport default connect(mapStateToProps)(ScreenOverview);"],"names":["LeaderbordSkeleton","React","ScreenOverview","Component","constructor","_this","arguments","this","state","fetchRecord","isLoading","total","limit","offset","paginateData","currentPage","maxPage","username","onLoadFilterData","_selectedWallFeed$wal","isSearch","length","undefined","analyticwall","props","selectedWallFeed","wallData","wall","id","setState","getScreenOverviewMore","then","response","responseData","data","paginate","catch","error","console","managePagging","pageClick","page","updateSearchText","value","componentDidMount","render","analyticsStatus","isPdfDownloading","_jsxs","className","children","_jsx","PopupSearch","placeholder","Table","responsive","style","width","Suspense","fallback","_Fragment","isScreen","map","mItem","mIndex","screenName","screenIp","deviceLocation","status","lastRefreshTime","hours","colspan","DataNotFound","Paggination","connect"],"sourceRoot":""}