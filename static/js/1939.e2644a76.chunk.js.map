{"version":3,"file":"static/js/1939.e2644a76.chunk.js","mappings":"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","sources":["app/Display/analytics-new/content/index.js"],"sourcesContent":["  import React, { PureComponent, Suspense } from \"react\";\r\n  import \"../assets/css/analytics.css\";\r\n  import { Col, Row } from \"react-bootstrap\";\r\n  import { connect } from \"react-redux\";\r\n  import { getAllContentData } from \"../../../../actions/analyticsNew\";\r\n\r\n  const TopCard = React.lazy(() => import(\"../layout/common/topCard\"));\r\n  const SentimentPost = React.lazy(() =>\r\n    import(\"./components/sentimentPost\")\r\n  );\r\n  const SentimentAnalytics = React.lazy(() =>\r\n    import(\"./components/sentimentAnalytics\")\r\n  );\r\n  const LeaderBoard = React.lazy(() =>\r\n    import(\"./components/leaderBoard\")\r\n  );\r\n  const TopeventVoice = React.lazy(() =>\r\n    import(\"./components/topeventVoice\")\r\n  );\r\n  const PosttypeCount = React.lazy(() =>\r\n    import(\"./components/posttypeCount\")\r\n  );\r\n  const TrueSense = React.lazy(() => import(\"./components/trueSense\"));\r\n  const AssetsLanguage = React.lazy(() =>\r\n    import(\"./components/assetsLanguage\")\r\n  );\r\n  const AssetsNetwork = React.lazy(() =>\r\n    import(\"./components/assetsNetwork\")\r\n  );\r\n  const Tagcloud = React.lazy(() => import(\"./components/tagCloud\"));\r\n\r\n  const ContentAnalytics = React.lazy(() =>\r\n    import(\"./components/aontentAnalytics\")\r\n  );\r\n\r\n  const TopAiTags = React.lazy(() =>\r\n    import(\"./components/topAiTags\")\r\n  );\r\n\r\n  class Content extends PureComponent {\r\n\r\n    componentDidMount() {\r\n      const { getAllContentData, analyticsRecords, } = this.props;  \r\n        if (!analyticsRecords.contentCount.length)  getAllContentData()\r\n    }\r\n\r\n    render() {\r\n\r\n      const { analyticsRecords, selectedWallFeed, authenticated, analyticsStatus } = this.props\r\n\r\n      const {\r\n        contentAnalytics,\r\n        truSense,\r\n        sentimentPost,\r\n        getFlags,\r\n        leaderBoard,\r\n        topeventVoices,\r\n        wordCloud,\r\n        topaiTags,\r\n        postbyLanguage,\r\n        postbyNetwork,\r\n        postTypeCount,\r\n        sentiment_loader,\r\n        content_loader,\r\n        leader_board_loader,\r\n        top_event_loader,\r\n        word_loader,\r\n        trusense_loader,\r\n        top_ai_loader,\r\n        post_by_language_loader,\r\n        post_type_count_loader, \r\n        posts_by_network_loader,\r\n        get_wall_sentiment_live_trend_data,\r\n        get_wall_sentiment_live_trend_loader,\r\n        dateFilter,\r\n        selected_feed_data\r\n      } = analyticsRecords;\r\n\r\n       const  selectedWallFeedData = { selectedWallFeed : selectedWallFeed }\r\n       const isUpgrade = authenticated.userData.user.trueSense\r\n       const isTrial = !selected_feed_data ||  analyticsStatus\r\n\r\n      return (\r\n        <>\r\n              <Row>\r\n                <Col lg={8}>\r\n                  <Suspense fallback={<></>}>\r\n                  <div className=\"row\">\r\n                    <TopCard col={3} res={4} loader={content_loader} data={contentAnalytics} /> \r\n                  </div>  \r\n                  </Suspense>\r\n\r\n                  <Suspense fallback={<></>}>\r\n                    <ContentAnalytics key={content_loader} loader={content_loader} contentAnalytics={contentAnalytics} />\r\n                  </Suspense>\r\n\r\n                  <Suspense fallback={<></>}>\r\n                    <SentimentAnalytics {...selectedWallFeedData} isUpgrade={isUpgrade}  loader={get_wall_sentiment_live_trend_loader} dateFilter={dateFilter} live_trend={get_wall_sentiment_live_trend_data} \r\n                     sentimentPost={sentimentPost}  />\r\n                  </Suspense>\r\n\r\n                  <Suspense fallback={<></>}>\r\n                    <SentimentPost isTrial={isTrial} loader={sentiment_loader} {...sentimentPost} {...selectedWallFeedData} />\r\n                  </Suspense>\r\n\r\n                  <Suspense fallback={<></>}>\r\n                    <LeaderBoard isTrial={isTrial}  loader={leader_board_loader} {...selectedWallFeedData} leaderBoard={leaderBoard} />\r\n                  </Suspense>\r\n\r\n                  <Suspense fallback={<></>}>\r\n                    <TopeventVoice isTrial={isTrial} top_event_loader={top_event_loader} {...selectedWallFeedData} topeventVoices={topeventVoices} />\r\n                  </Suspense>\r\n                </Col>\r\n\r\n                <Col lg={4}>\r\n                  <Suspense fallback={<></>}>\r\n                    <TrueSense loader={trusense_loader} truSense={truSense} {...selectedWallFeedData} dateFilter={dateFilter} />\r\n                  </Suspense>\r\n\r\n                  <Suspense fallback={<></>}>\r\n                    <Tagcloud key={word_loader} word_loader={word_loader} wordCloud={wordCloud} />\r\n                  </Suspense>\r\n\r\n                  <Suspense fallback={<></>}>\r\n                    <TopAiTags key={top_ai_loader} top_ai_loader={top_ai_loader}  {...selectedWallFeedData}  topaiTags={topaiTags} />\r\n                  </Suspense>\r\n\r\n                  <Suspense fallback={<></>}>\r\n                    <PosttypeCount key={post_type_count_loader} loader={post_type_count_loader} {...selectedWallFeedData} dateFilter={dateFilter}  postTypeCount={postTypeCount} />\r\n                  </Suspense>\r\n\r\n                  <Suspense fallback={<></>}>\r\n                    <AssetsLanguage key={post_by_language_loader} loader={post_by_language_loader}  getFlags={getFlags} detail={this.props.detail} {...selectedWallFeedData} postbyLanguage={postbyLanguage} />\r\n                  </Suspense>\r\n\r\n                  <Suspense fallback={<></>}>\r\n                    <AssetsNetwork loader={posts_by_network_loader}  postbyNetwork={postbyNetwork} />\r\n                  </Suspense>\r\n                </Col>\r\n              </Row>\r\n         </>\r\n      );\r\n    }\r\n  }\r\n\r\n  const contentStateToProps = (state) => { \r\n    return {\r\n      analyticsRecords: state.analyticsRecords,\r\n      detail: state.appsMore.detail,\r\n      selectedWallFeed: state.analyticwall.selectedWallFeed.feeds,\r\n      authenticated : state.authenticated,\r\n      analyticsStatus: state.analyticsStatus.trialAccessAPI,\r\n    };\r\n  };\r\n\r\n  const contentDispatchToProps = (dispatch) => {\r\n    return {\r\n      getAllContentData: () => dispatch(getAllContentData()),\r\n    };\r\n  };\r\n\r\n  export default connect(contentStateToProps, contentDispatchToProps)(Content);\r\n"],"names":["TopCard","React","SentimentPost","SentimentAnalytics","LeaderBoard","TopeventVoice","PosttypeCount","TrueSense","AssetsLanguage","AssetsNetwork","Tagcloud","ContentAnalytics","TopAiTags","Content","PureComponent","componentDidMount","getAllContentData","analyticsRecords","this","props","contentCount","length","render","selectedWallFeed","authenticated","analyticsStatus","contentAnalytics","truSense","sentimentPost","getFlags","leaderBoard","topeventVoices","wordCloud","topaiTags","postbyLanguage","postbyNetwork","postTypeCount","sentiment_loader","content_loader","leader_board_loader","top_event_loader","word_loader","trusense_loader","top_ai_loader","post_by_language_loader","post_type_count_loader","posts_by_network_loader","get_wall_sentiment_live_trend_data","get_wall_sentiment_live_trend_loader","dateFilter","selected_feed_data","selectedWallFeedData","isUpgrade","userData","user","trueSense","isTrial","_jsx","_Fragment","children","_jsxs","Row","Col","lg","Suspense","fallback","className","col","res","loader","data","live_trend","detail","connect","state","appsMore","analyticwall","feeds","trialAccessAPI","dispatch"],"sourceRoot":""}