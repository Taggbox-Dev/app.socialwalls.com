{"version":3,"file":"static/js/5337.f55bad99.chunk.js","mappings":"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","sources":["app/Layouts/Main/Analytics/layout/common/feedsList.js","app/Layouts/Main/Analytics/layout/common/subheader/subHeader.js","app/Layouts/Main/Analytics/utils/index.js"],"sourcesContent":["import React, { Component, memo } from \"react\";\nimport { connect } from \"react-redux\";\nimport ReactHtmlParser from 'react-html-parser';\nimport ReactMultiSelectCheckboxes from 'react-multiselect-checkboxes';\nimport { feedsNetworksPrefix, networkIcon } from '../../../../../../utils';\nimport { activeTab, swithcWall, updateSelectedFeed } from \"../../../../../../actions/analyticsAction\";\nimport { useLocation } from \"react-router-dom\";\n\nconst FeedsList=(props)=>{\n  const location = useLocation()\n   return <FL location={location} {...props}></FL>\n}\n\nclass FL extends Component {\n  state = { feed: [], wallID: null, getwallID: null, updateFeedList: [], refreshing: true, spece: `-` }\n  componentDidMount() {\n    const { analyticwall, analyticsStatus } = this.props\n    const { spece } = this.state\n    let updateFeedList = []; let wallID = 0;\n    if (analyticwall.selectedWallFeed && Object.keys(analyticwall.selectedWallFeed).length > 0) {\n      if (analyticwall.selectedWallFeed && analyticwall?.selectedWallFeed?.feeds?.length > 0) {\n        wallID = analyticwall?.selectedWallFeed?.wall?.id;\n        analyticwall?.selectedWallFeed?.feeds.map((item) => {\n          updateFeedList.push({ value: item.id, label: ReactHtmlParser(`${item.Network.icon ? networkIcon(item.Network.icon) : \"\"}  ${feedsNetworksPrefix(item.filterId)}  ${item.name}  ${item.filterIdName ? spece : ''} ${item.filterIdName ? item.filterIdName : ''}`) })\n        })\n      }\n    }\n\n\n    if(analyticwall?.selectedWallFeed?.wall.id!=localStorage.getItem('wallId')){\n        this.props.swithcWall()\n    }\n\n    this.setState({ getwallID : analyticwall?.selectedWallFeed?.wall?.id})\n    this.setState({ updateFeedList, wallID, feed: this.state.wallID != wallID ? updateFeedList : this.state.feed }, () => this.props.updateSelectedFeed(this.state.feed, analyticsStatus.trialAccessAPI))\n  }\n\n  changeFeedsFilters = (event) => { \n    const { analyticsStatus } = this.props;\n     if(event.length>0) this.setState({ feed: event }, () => this.props.updateSelectedFeed(this.state.feed, analyticsStatus.trialAccessAPI))\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { analyticwall, wallRefresh } = nextProps\n    const { refreshing, spece } = this.state;\n    let updateFeedList = []; let wallID = 0;\n    if (analyticwall.selectedWallFeed && Object.keys(analyticwall.selectedWallFeed).length > 0) {\n      if (analyticwall.selectedWallFeed && analyticwall?.selectedWallFeed?.feeds?.length > 0) {\n        wallID = analyticwall?.selectedWallFeed?.wall?.id;\n        analyticwall?.selectedWallFeed?.feeds?.map((item) => {\n          updateFeedList?.push({ value: item.id, label: ReactHtmlParser(`${item.Network.icon ? networkIcon(item.Network.icon) : \"\"}  ${feedsNetworksPrefix(item.filterId)}  ${item.name}  ${item.filterIdName ? spece : ''} ${item.filterIdName ? item.filterIdName : ''}`) })\n        })\n\n      }\n    }\n    if (updateFeedList != this.state.updateFeedList && wallRefresh && wallRefresh.refreshing && refreshing) {\n      this.setState({ updateFeedList, wallID, feed: updateFeedList, refreshing: false })\n    }\n    else {\n      this.setState({ updateFeedList, wallID, feed: this.state.wallID != wallID ? updateFeedList : this.state.feed }, () => setTimeout(() => this.setState({ refreshing: true }), 2000))\n    }\n  }\n\n  render() {\n\n    const { updateFeedList, feed } = this.state;\n    return <div className=\"w-auto react-search-feed filter_btn_wrap\">\n      <ReactMultiSelectCheckboxes\n        classNamePrefix={`check-feed`}\n        value={feed}\n        onChange={this.changeFeedsFilters}\n        options={updateFeedList}\n      />\n    </div>\n  }\n}\n\n \nconst mapStateToProps = (state) => {  \n  return {\n    analyticwall: state.analyticwall,\n    analyticsStatus: state.analyticsStatusD,\n    wallRefresh: state.wallRefresh\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    activeTab: (data) => dispatch(activeTab(data)),\n    updateSelectedFeed: (data, isTrial) => dispatch(updateSelectedFeed(data, isTrial)),\n    swithcWall: () => dispatch(swithcWall()),\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(memo(FeedsList));","  import React, { useState } from \"react\";\n  import { Link, useLocation } from \"react-router-dom\";\n  import SVG from \"react-inlinesvg\";\n  import { toAbsoluteUrl } from \"../../../utils\";\n  import { Button, Nav, OverlayTrigger, Tooltip } from \"react-bootstrap\";\n  import FeedsList from \"../feedsList\";\n  import DateRangePicker from \"react-bootstrap-daterangepicker\";\n  import { shallowEqual, useDispatch } from \"react-redux\"; \n  import { useSelector } from \"react-redux\";\n  import queryString from \"query-string\";\n  import moment from \"moment\";\n  import { activeTab, refreshButton, updateFilterDate, updateSelectedFeed } from \"../../../../../../../actions/analyticsAction\";\n  import { useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"../../../../../../CommonComponents/AssetsHelper\";\n\n  const Subheader = (props) => {\n    const location = useLocation();\n    const dispatch = useDispatch();\n\n    const { analyticwall, analyticsStatus, pageRefresh, analytics_status_loader, getactiveTab, analyticsRecords, dateFilter } = useSelector(\n      ({ analyticwallD, analyticsStatusD, analyticsRecords }) => ({\n        analyticwall: analyticwallD,\n        analyticsStatus: analyticsStatusD,\n        pageRefresh: analyticsRecords.page_refresh,\n        analytics_status_loader : analyticsRecords.analytics_status_loader,\n        dateFilter : analyticsRecords.dateFilter,\n        getactiveTab : analyticsRecords.activeTab,\n        analyticsRecords : analyticsRecords\n      }),\n      shallowEqual\n    );\n\n    const trialAccessAPI =  !analyticwall.selectedFeed.length ? true : analyticsStatus.trialAccessAPI\n\n \n    const filterDate =\n      analyticwall && Object.keys(analyticwall).length > 0\n        ? analyticwall.dateFilter\n        : null;\n    let startdateupdate =\n      filterDate && Object.keys(filterDate).length > 0 && filterDate.startDate\n        ? filterDate.startDate\n        : moment().subtract(29, \"days\").format(\"DD-MM-YYYY\");\n    let enddateupdate =\n      filterDate && Object.keys(filterDate).length > 0 && filterDate.endDate\n        ? filterDate.endDate\n        : moment().format(\"DD-MM-YYYY\");\n    const parsed = queryString.parse(location.search);\n    if (parsed.startdate) {\n      startdateupdate = moment.unix(parsed.startdate).format(\"DD-MM-YYYY\");\n    }\n    if (parsed.enddate) {\n      enddateupdate = moment.unix(parsed.enddate).format(\"DD-MM-YYYY\");\n    }\n\n    const [startDate, setStartDate] = useState(startdateupdate);\n    const [endDate, setEndDate] = useState(enddateupdate);\n    const [maxDate, setMaxDate] = useState(\n      moment().endOf(\"month\").format(\"DD-MM-YYYY\")\n    );\n\n     const handleOnApply = (event, picker) => {\n\n        dispatch(  \n          updateSelectedFeed(analyticsRecords.selected_feed_data,trialAccessAPI,\n            { startDate: picker.startDate, endDate: picker.endDate }\n          )\n        )\n\n        setStartDate(picker.startDate.format(\"DD-MM-YYYY\"));\n        setEndDate(picker.endDate.format(\"DD-MM-YYYY\"));\n       // dispatch(updateFilterDate({startDate: picker.startDate, endDate: picker.endDate }));\n     }\n\n    // const callbackFeed=()=>{  \n    //   dispatch(\n    //     updateSelectedFeed(analyticwall.selectedFeed,trialAccessAPI,\n    //       { startDate: dateFilter.startDate, endDate: dateFilter.endDate }\n    //     )\n    //   );\n    //   setStartDate(dateFilter.startDate.format(\"DD-MM-YYYY\"));\n    //   setEndDate(dateFilter.endDate.format(\"DD-MM-YYYY\"));\n    // }\n\n    useEffect(() => {\n       dispatch(activeTab(location.pathname))\n    }, []);\n\n  \n    const onClickRefreshButton = event => {\n       dispatch(refreshButton(trialAccessAPI))\n    }\n\n    return (\n      <> \n      <div id=\"sw_subheader\" className=\"analytics_subheader bg-white box-shadow\">\n        <div className=\"container-fluid f-between flex-wrap position-relative ps-0\">\n          <div className=\"d-flex align-items-center\">\n            <Link className=\"btn me-3 border-end border-0 py-3 rounded-0\" to={`/wall/index/${localStorage.getItem('wallId')}`}>\n                <FontAwesomeIcon type={'regular'} icon={'chevron-left'}/>\n            </Link>\n\n            <Nav className=\"sw-anlts-nav-tabs\" defaultActiveKey={`/analytic/${localStorage.getItem('wallId')}`} as={'ul'}>\n              <Nav.Item className=\"me-2\" as=\"li\">\n                <Link to={`/analytic/${localStorage.getItem('wallId')}`} className={`nav-link ${location.pathname.includes(localStorage.getItem('wallId')) ? `active` : ``}`}>Content</Link>\n              </Nav.Item>\n              <Nav.Item as=\"li\">\n                <Link to={\"/analytic/activityHub/widget\"} className={`nav-link ${location.pathname.includes(\"activityHub\")? `active`: ``}`}>Activity Hub</Link>\n              </Nav.Item>\n            </Nav>\n            {/* <ul className=\"nav sw-anlts-nav-tabs\"> \n              <li className=\"me-3\">   \n                <Link to={`/analytic/${localStorage.getItem('wallId')}`} className={`nav-link ${location.pathname.includes(localStorage.getItem('wallId')) ? `active` : ``}`}>\n                  Content \n                </Link>\n              </li>\n              <li className=\"me-3\">\n                <Link to={\"/analytic/activityHub/widget\"} className={`nav-link ${location.pathname.includes(\"activityHub\")? `active`: ``}`}>\n                  Activity Hub\n                </Link>\n              </li>\n            </ul> */}\n          </div>\n          <div className=\"d-flex justify-content-end flex-grow-1\">\n              <div className=\"option-list active\">\n                  <div className=\"d-flex\">\n                    <div className=\"ms-2\">\n                        <Button variant=\"outline-secondary\" onClick={()=>onClickRefreshButton()} className=\"h-32px w-32px f-center\">\n                          <OverlayTrigger placement=\"bottom\" overlay={<Tooltip className=\"my-custom-tooltip\">Reffresh</Tooltip>}>\n                              <span className={`d-flex${(pageRefresh && pageRefresh) ? ` fa fa-spin` : ``}`}>\n                                <FontAwesomeIcon type={'solid'} icon={'arrows-rotate'} iconClass={'fs-6'}/>\n                              </span> \n                          </OverlayTrigger> \n                        </Button>\n                    </div>\n                  { !props.activeTab && ![3].includes(getactiveTab) ? <div className=\"ms-2\">\n                    { analytics_status_loader ? <FeedsList /> : null }\n                    </div> : null }\n                    \n                  { ![3].includes(getactiveTab) ?  \n                    <div className=\"ms-2\">\n                      <DateRangePicker onApply={handleOnApply} startDate={startDate} endDate={endDate}\n                        initialSettings={{\n                          locale: { format: \"DD-MM-YYYY\", separator: \"-\" },\n                          maxDate: maxDate,\n                          showDropdowns: true,\n                          startDate: startDate,\n                          endDate: endDate,\n                          ranges: {\n                            Today: [\n                              moment().format(\"DD-MM-YYYY\"),\n                              moment().format(\"DD-MM-YYYY\"),\n                            ],\n                            Yesterday: [\n                              moment().subtract(1, \"days\").format(\"DD-MM-YYYY\"),\n                              moment().subtract(1, \"days\").format(\"DD-MM-YYYY\"),\n                            ],\n                            \"Last 7 Days\": [\n                              moment().subtract(6, \"days\").format(\"DD-MM-YYYY\"),\n                              moment().format(\"DD-MM-YYYY\"),\n                            ],\n                            \"Last 30 Days\": [\n                              moment().subtract(29, \"days\").format(\"DD-MM-YYYY\"),\n                              moment().format(\"DD-MM-YYYY\"),\n                            ],\n                            \"This Month\": [\n                              moment().startOf(\"month\").format(\"DD-MM-YYYY\"),\n                              moment().endOf(\"month\").format(\"DD-MM-YYYY\"),\n                            ],\n                            \"Last Month\": [\n                              moment()\n                                .subtract(1, \"month\")\n                                .startOf(\"month\")\n                                .format(\"DD-MM-YYYY\"),\n                              moment()\n                                .subtract(1, \"month\")\n                                .endOf(\"month\")\n                                .format(\"DD-MM-YYYY\"),\n                            ],\n                          },\n                        }}\n                        // onCallback={handleCallback}\n                      >\n                        <Button variant=\"outline-secondary\" className=\"h-32px w-32px f-center\" id=\"reportrange\">\n                          <OverlayTrigger placement=\"bottom\" overlay={<Tooltip className=\"my-custom-tooltip\">Date Filter</Tooltip>}>\n                            <FontAwesomeIcon type={'regular'} icon={'calendar-range'} iconClass={'fs-6'} />\n                          </OverlayTrigger>\n                        </Button>\n                      </DateRangePicker>\n                    </div> : null }\n                  </div>\n              </div>\n\n              <div className=\"more-option\">\n                  <Button variant=\"outline-secondary\" className=\"h-32px w-32px f-center\">\n                    <FontAwesomeIcon type={'solid'} icon={'ellipsis-vertical'} iconClass={'fs-6'}/>\n                  </Button>\n              </div>\n            </div>\n        </div>\n      </div>\n\n      \n        {/* <div  className=\"d-flex flex-column-fluid main_content\">\n            <div className=\"py-5 w-100\">\n                <div className=\"container-fluid px-xl-5\">\n                      <div className=\"row\">\n                        <div className=\"col-lg-12 col-xxl-12\">\n                            <div className=\"alert custom-alert\">\n                                <span>This is a demo data. You cannot see live data because you haven't added a post yet. Please add posts to see real time analytics.</span>\n                                  <a className=\"free-trial-upgrade cursor-pointer\" onClick={()=>dispatch(togglePlanSection(true))}>\n                                    Upgrade Now\n                                </a> \n                            </div>\n                        </div>\n                    </div>  \n                </div>\n            </div>\n        </div>           */}\n      </>\n    );\n  };\n\n  export default Subheader;\n","import axios from 'axios'; \nimport store from '../../../../../store';\nimport { EXPIRE_POST_UPDATE, LIVE_API, NoCameraImgPost } from '../../../../../actions/api';\nimport moment from 'moment';\nimport { GET_INSTAGRAM_IMAGE } from '../../../../../actions/analyticsAction';\n\nexport const toAbsoluteUrl = pathname => `https://cloud.tagbox.com/app/analytics` + pathname;\n\nexport const ordinal_suffix_of = (i) => {\n    var j = i % 10,\n        k = i % 100;\n    if (j == 1 && k != 11) {\n        return i + \"st\";\n    }\n    if (j == 2 && k != 12) {\n        return i + \"nd\";\n    }\n    if (j == 3 && k != 13) {\n        return i + \"rd\";\n    }\n    return i + \"th\";\n}\n\nexport const secondsToTime = (secs) => {\n    // var hours = Math.floor(secs / (60 * 60));\n    // var divisor_for_minutes = secs % (60 * 60);\n    // var minutes = Math.floor(divisor_for_minutes / 60);\n\n    // var divisor_for_seconds = divisor_for_minutes % 60;\n    // var seconds = Math.ceil(divisor_for_seconds);\n    // return `${hours}:${minutes}:${seconds}`;\n\n    var sec_num = parseInt(secs, 10); // don't forget the second param\n    var hours = Math.floor(sec_num / 3600);\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n    if (hours < 10) { hours = \"0\" + hours; }\n    if (minutes < 10) { minutes = \"0\" + minutes; }\n    if (seconds < 10) { seconds = \"0\" + seconds; }\n\n    return hours + ':' + minutes + ':' + seconds;\n\n\n}\n\nexport const getTimeTypeSecondToTime = (secs, type) => {\n    let dataTime = secondsToTime(secs);\n    let acrtualTime = dataTime.split(':')\n    if (type == 1) {\n        if (acrtualTime && acrtualTime.length) return acrtualTime[0];\n        else return 0;\n    }\n    else if (type == 2) {\n\n        if (acrtualTime && acrtualTime.length) return acrtualTime[1];\n        else return 0;\n    }\n    else if (type == 3) {\n        if (acrtualTime && acrtualTime.length) return acrtualTime[2];\n        else return 0;\n    }\n}\nexport const validURL = (str) => {\n    var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n        '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n    return !!pattern.test(str);\n}\n\nexport const convertIntToBool = (value) => {\n    if (value) return Boolean(value)\n    else return value;\n\n}\n\n\nexport const customClass = {\n    confirmButton: 'btn-primary btn-min-w btn btn-primary',\n    cancelButton: 'border-btn btn-outline-dark me-4 btn-min-w btn btn-primary',\n}\n\n\nexport const updateURLForIframe = (url) => {\n    if (url && url.includes('youtube.com')) {\n        const urlSplits = url.split('?v=');\n        if (urlSplits && urlSplits.length && urlSplits[1]) {\n            url = `https://www.youtube.com/embed/${urlSplits[1]}`;\n        }\n    }\n    else if (url && url.includes('vimeo.com')) {\n        const urlSplits = url.split('/');\n        if (urlSplits && urlSplits.length && urlSplits[urlSplits.length - 1]) {\n            url = `https://player.vimeo.com/video/${urlSplits[urlSplits.length - 1]}?autoplay=1&loop=1&autopause=0`;\n        }\n    }\n    return url;\n}\n\nexport const getSecondsFromTime = (time) => {\n    let actualTime = time.split(':');\n    let totalSeconds = (+actualTime[0]) * 60 * 60 + (+actualTime[1]) * 60 + (+actualTime[2]);\n    return totalSeconds;\n}\n\nexport const loaderCircleStyle = { padding: 1, color: '#545454', fontSize: 10 }\nexport const getPosition = (partitions, currentSceneContent) => {\n    const getPartitions = Object.keys(partitions).map((item) => ({ position: item, name: partitions[item] }))\n    const filterData = getPartitions.filter((item) => item.name == currentSceneContent.name);\n    return filterData;\n}\nexport const GET_HEIGHT_WIDTH = (cssStyle, position, layouts, mixContentType) => {\n\n    const actualLayout = layouts.filter((item) => item.id == mixContentType)\n\n    if (actualLayout && actualLayout[0]) {\n\n\n        const currentHeightWidth = GET_DYNAMIC_HEIGHT_WIDTH(cssStyle, position);\n        const actualDefault = GET_DYNAMIC_HEIGHT_WIDTH(actualLayout[0].css, position);\n        if (actualDefault && Object.keys(actualDefault).length) {\n            if (parseInt(actualDefault.height) > parseInt(actualDefault.width)) {\n                return { width: currentHeightWidth.width, height: 0, label: \"Width\" }\n            }\n            else if (parseInt(actualDefault.height) < parseInt(actualDefault.width)) {\n                return { height: currentHeightWidth.height, width: 0, label: \"Height\" }\n            }\n            else {\n                if (mixContentType == 1) {\n                    return { height: currentHeightWidth.height, width: 0, label: \"Height\" }\n                }\n                else {\n                    return { height: 0, width: 0 }\n                }\n            }\n        }\n        else {\n            return currentHeightWidth;\n        }\n    }\n}\n\nconst GET_DYNAMIC_HEIGHT_WIDTH = (cssStyle, position) => {\n    const cData = cssStyle.split(\"#zone\");\n\n    var height = \"\"; var width = \"\";\n    if (cData && cData.length) {\n        cData.map((item, index) => {\n            const trimContent = item.trim()\n            const firstValue = trimContent.charAt(0);\n            if (firstValue == position[0].position) {\n                const replaceValue = item.split(\";\")\n                if (replaceValue && replaceValue.length) {\n                    replaceValue.map((rItem) => {\n                        const getHeightWidth = rItem.split(\":\");\n                        if (getHeightWidth && getHeightWidth[0] && getHeightWidth[0] == \"height\") height = getHeightWidth[1].replace(\"%\", \"\");\n                        if (getHeightWidth && getHeightWidth[0] && getHeightWidth[0] == \"width\") width = getHeightWidth[1].replace(\"%\", \"\");\n                    })\n                }\n            }\n        })\n    }\n    return { height, width, }\n}\n\nexport const convertHMS = (timeString) => {\n    const arr = timeString.split(\":\");\n    const seconds = arr[0] * 3600 + arr[1] * 60 + (+arr[2]);\n    return seconds;\n}\n\n\n\n\nexport const getRandomArbitrary = (min, max) => {\n    return parseInt(Math.random() * (max - min) + min);\n}\n\nexport const additionArrayData = (data) => {\n    if (data && data.length > 0) {\n        return data.reduce((total, num) => total + num)\n    }\n    else return 0\n}\n\nexport const kFormatter = (value) => {\n    // return Math.abs(num) > 999 ? Math.sign(num) * ((Math.abs(num) / 1000).toFixed(1)) + 'k' : Math.sign(num) * Math.abs(num)\n\n\n    // return Math.abs(Number(num)) >= 1.0e+9 ? (Math.abs(Number(num)) / 1.0e+9).toFixed(2) + \"B\" : Math.abs(Number(num)) >= 1.0e+6 ? (Math.abs(Number(num)) / 1.0e+6).toFixed(2) + \"M\" : Math.abs(Number(num)) >= 1.0e+3 ? (Math.abs(Number(num)) / 1.0e+3).toFixed(2) + \"K\" : Math.abs(Number(num));\n    try {\n\n\n        var newValue = value;\n        if (value >= 1000) {\n            var suffixes = [\"\", \"K\", \"M\", \"B\", \"T\"];\n            var suffixNum = Math.floor((\"\" + value).length / 3);\n            var shortValue = '';\n            for (var precision = 2; precision >= 1; precision--) {\n                shortValue = parseFloat((suffixNum != 0 ? (value / Math.pow(1000, suffixNum)) : value).toPrecision(precision));\n                var dotLessShortValue = (shortValue + '').replace(/[^a-zA-Z 0-9]+/g, '');\n                if (dotLessShortValue.length <= 2) { break; }\n            }\n            if (shortValue % 1 != 0) shortValue = shortValue.toFixed(1);\n            newValue = shortValue + suffixes[suffixNum];\n        }\n        return newValue;\n    }\n    catch (ex) {\n        return Math.abs(value) > 999 ? Math.sign(value) * ((Math.abs(value) / 1000).toFixed(1)) + 'k' : Math.sign(value) * Math.abs(value)\n    }\n\n}\nexport const OverviewChartFormatting = (formattingData) => {\n    let data = [];\n    if (formattingData && formattingData.length > 0) {\n        formattingData.map((item) => {\n            data.push({\n                name: item.name,\n                type: 'line',\n                data: dataConvertToInt(item.data)\n            })\n        })\n        return data;\n    }\n    else return formattingData;\n}\n\nexport const dataConvertToInt = (formateIntData) => {\n    let updateData = [];\n    if (formateIntData && formateIntData.length > 0) {\n        formateIntData.map((item) => {\n            updateData.push(parseInt(item))\n\n        })\n        return updateData\n\n\n    }\n    else return formateIntData\n\n}\n\n\nexport const networkURLIsValid = (str) => {\n    let output = str;\n    let matches;\n    matches = str.match(/(?:https?:\\/\\/)?(?:www.)?(?:twitter|medium|facebook|vimeo|instagram|google|pinterest|flickr|youtube|linkedin|vkontakte|vk|tiktok|soundcloud|giphy|airbnb|yammer|slack|yelp|workplace|rss|tumblr)(?:.com\\/)?([@a-zA-Z0-9-_]+)/im);\n    if (matches && matches.length > 0) return true\n    else return false;\n}\n\nexport const capitalizeFirstLetter = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst UPDATE_INSTAGRAM_IMAGE_VIDEO = `https://${LIVE_API ? 'app' : 'test'}.taggbox.com/display/post/update`;\nconst NO_CAMERA_IMAGE = NoCameraImgPost;\nconst updateStatusRenewImage = (wallId, postId, table_name, e) => {\n    const { moderation, authenticated } = store.getState();\n    const { details, listData } = moderation;\n    const { userData } = authenticated;\n    const postData = listData.length > 0 ? listData.filter((val) => val.id == postId) : []\n    const url = details?.wall?.url;\n    const table = userData.UserPlan.db_table;\n    let dataFormatted = {\n        wallId: wallId,\n        postId: postId,\n        table_name: table,\n        ownerId: localStorage.getItem('ownerId'),\n        feedId: postData.length > 0 ? postData[0].feedId : '',\n        type: postData.length > 0 ? postData[0].type : '',\n        link: postData.length > 0 ? postData[0].link : '',\n        postFile: postData.length > 0 ? postData[0].postFile : '',\n        mediaFile: postData.length > 0 ? postData[0].mediaFile : '',\n        url: url\n    }\n    axios.post(EXPIRE_POST_UPDATE, dataFormatted).then(({ data }) => {\n        e.target.src = data.media;\n        e.target.attributes[\"data-load\"].value = \"1\";\n    })\n}\n\nexport const updateInstagramPostImage = (data) => {\n    const { authenticated } = store.getState();\n    const { userData } = authenticated;\n    const table = userData.UserPlan.db_table;\n\n    let dataFormatted = {\n        ...data,\n        table_name: table\n    }\n    axios.post(`${UPDATE_INSTAGRAM_IMAGE_VIDEO}`, dataFormatted)\n        .then((response) => { })\n        .catch((error) => {\n            console.error(error);\n        });\n};\n\nconst FETCH_LINK = (fetchUrl, postId, dataSrc, type) => GET_INSTAGRAM_IMAGE(fetchUrl).then((response) => {\n    let html = response.data;\n    if (html) {\n        var regex = /_sharedData = ({.*);<\\/script>/m,\n            json = JSON.parse(regex.exec(html)[1]);\n        if (typeof json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children !== 'undefined') {\n            if (type == 'video') {\n                const videoPath = json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children.edges.filter((item) => item.node.shortcode == postId[4])[0].node.video_url\n                return videoPath;\n            } else {\n                const imagePath = json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children.edges.filter((item) => item.node.shortcode == postId[4])[0].node.display_url\n                return imagePath;\n            }\n        }\n        else if (json.entry_data.PostPage[0].graphql.shortcode_media.__typename === 'GraphVideo') {\n\n            if (json.entry_data.PostPage[0].graphql.shortcode_media.is_video) {\n                return { video_url: json.entry_data.PostPage[0].graphql.shortcode_media.video_url, display_url: json.entry_data.PostPage[0].graphql.shortcode_media.display_url }\n            }\n        }\n        else {\n            return json.entry_data.PostPage[0].graphql.shortcode_media.display_url;\n        }\n    }\n\n}).catch((error) => {\n    if (dataSrc.includes(\"cdn.taggbox.com\")) return NO_CAMERA_IMAGE;\n    else return NO_CAMERA_IMAGE;\n})\n\n\nexport const IMG_LOAD_AFTER_COMPLETE_LAYOUT = async (e) => {\n    // return\n    e.persist()\n   \n    const { userData } = store.getState().authenticated;\n    const table_name = userData.UserPlan.db_table;\n    const network = e.target.getAttribute(\"data-network\")\n    const wallId = e.target.getAttribute(\"data-wall-id\");\n    const postId = e.target.getAttribute(\"data-item-id\");\n    const filterId = e.target.getAttribute(\"data-filter-id\");\n    let links = e.target.getAttribute(\"data-link\");\n    let image_update = '';\n    let video_update = '';\n    // const UserDetail = store.getState();\n    if (network) {\n        const dataSrc = e.target.src;\n        if ((network == 2 || network == 18 || network == 3 || network == 28) && (dataSrc.includes(\"cloud.taggbox.com\") || dataSrc.includes(\"cdn.taggbox.com\") || dataSrc.includes(\"cdninstagram.com\") || dataSrc.includes(\"no-camera.svg\") || dataSrc.includes(\"instagram-no-image\") || network == 3 || network == 28) && e.target.getAttribute(\"data-load\") == 0 && filterId != \"34\") {\n            if ((network == 2 || network == 18)) {\n                let postLinkId = links.split('/');\n                let fetchUrl = `https://images${~~(Math.random() * 3333)}-focus-opensocial.googleusercontent.com/gadgets/proxy?container=none&url=${links}`;\n                let IMG_URL_UPDATE = await FETCH_LINK(fetchUrl, postLinkId, dataSrc, 'image')\n                if (IMG_URL_UPDATE && IMG_URL_UPDATE != null && IMG_URL_UPDATE.length > 0 && typeof IMG_URL_UPDATE === 'string' && (IMG_URL_UPDATE.includes(\"no-camera.svg\") || IMG_URL_UPDATE.includes(\"lookaside.instagram.com\"))) {\n                    updateStatusRenewImage(wallId, postId, table_name, e)\n                }\n                else {\n                    if (IMG_URL_UPDATE && IMG_URL_UPDATE != null && IMG_URL_UPDATE.length > 0 && typeof IMG_URL_UPDATE === 'string') {\n                        e.target.src = `https://images.taggbox.com/${IMG_URL_UPDATE}`;\n                        image_update = IMG_URL_UPDATE;\n                        e.target.attributes[\"data-load\"].value = \"1\";\n                        if (IMG_URL_UPDATE.includes(\"no-camera.svg\")) {\n                            e.target.style = \"visibility:visible!important;width:180px;margin:20px auto;object-fit: contain;\";\n                        }\n                        e.target.style = \"\";\n                    }\n                    else {\n                        if (IMG_URL_UPDATE.display_url && IMG_URL_UPDATE.display_url.includes(\"lookaside.instagram.com\")) {\n                            updateStatusRenewImage(wallId, postId, table_name, e)\n                        }\n                        else {\n                            e.target.src = `https://images.taggbox.com/${IMG_URL_UPDATE.display_url}`;\n                            image_update = IMG_URL_UPDATE.display_url;\n                            video_update = IMG_URL_UPDATE.video_url;\n                            e.target.attributes[\"data-load\"].value = \"1\";\n                            if (IMG_URL_UPDATE.display_url.includes(\"no-camera.svg\")) {\n                                e.target.style = \"visibility:visible!important;width:180px;margin:20px auto;object-fit: contain;\";\n                            }\n                            e.target.style = \"\";\n                        }\n                    }\n                    if (!image_update.includes(\"no-camera.svg\") && !image_update.includes(\"cdn.taggbox.com\") && !image_update.includes(\"lookaside.instagram.com\")) {\n\n                        updateInstagramPostImage({\n                            ownerId: localStorage.getItem('ownerId'),\n                            wallId: wallId,\n                            postFile: image_update,\n                            video: video_update,\n                            type: 2,\n                            postId: postId,\n                            table_name: table_name\n                        });\n                    }\n                }\n\n            }\n            else {\n                const { details, listData } = store.getState().moderation;\n                const postData = listData.length > 0 ? listData.filter((val) => val.id == postId) : []\n                const url = details?.wall?.url;\n\n                let dataFormatted = {\n                    wallId: wallId,\n                    postId: postId,\n                    table_name: table_name,\n                    ownerId: localStorage.getItem('ownerId'),\n                    feedId: postData.length > 0 ? postData[0].feedId : '',\n                    type: postData.length > 0 ? postData[0].type : '',\n                    link: postData.length > 0 ? postData[0].link : '',\n                    postFile: postData.length > 0 ? postData[0].postFile : '',\n                    mediaFile: postData.length > 0 ? postData[0].mediaFile : '',\n                    url: url\n                }\n                axios.post(EXPIRE_POST_UPDATE, dataFormatted).then(({ data }) => {\n                    e.target.src = data.media;\n                    e.target.attributes[\"data-load\"].value = \"1\";\n\n                })\n            }\n        }\n        else {\n            if (dataSrc.includes(\"no-camera.svg\")) {\n                e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\n            }\n            else {\n                e.target.src = NO_CAMERA_IMAGE;\n                e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\n\n            }\n            e.target.attributes[\"data-load\"].value = \"1\";\n        }\n\n    }\n    else {\n        e.target.src = NO_CAMERA_IMAGE;\n        e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\n\n    }\n\n}\n\n\nexport const removeHttp = (str) => {\n    return str.split('//')[1].replace(/\\/$/, \"\").replace(/^www\\./, '')\n}\n\n\nexport const dateFormat = (date) =>{\n    return moment(date).format(\"YYYY-MM-DD HH:mm:ss\")\n}\n\n\n "],"names":["FeedsList","props","location","useLocation","_jsx","FL","Component","constructor","arguments","state","feed","wallID","getwallID","updateFeedList","refreshing","spece","changeFeedsFilters","event","analyticsStatus","this","length","setState","updateSelectedFeed","trialAccessAPI","componentDidMount","_analyticwall$selecte6","_analyticwall$selecte7","_analyticwall$selecte8","analyticwall","_analyticwall$selecte","_analyticwall$selecte2","_analyticwall$selecte3","_analyticwall$selecte4","_analyticwall$selecte5","selectedWallFeed","Object","keys","feeds","wall","id","map","item","push","value","label","ReactHtmlParser","Network","icon","networkIcon","feedsNetworksPrefix","filterId","name","filterIdName","localStorage","getItem","swithcWall","componentWillReceiveProps","nextProps","wallRefresh","_analyticwall$selecte9","_analyticwall$selecte0","_analyticwall$selecte1","_analyticwall$selecte10","_analyticwall$selecte11","_analyticwall$selecte12","setTimeout","render","className","children","ReactMultiSelectCheckboxes","classNamePrefix","onChange","options","connect","analyticsStatusD","dispatch","activeTab","data","isTrial","memo","useDispatch","pageRefresh","analytics_status_loader","getactiveTab","analyticsRecords","dateFilter","useSelector","_ref","analyticwallD","page_refresh","shallowEqual","selectedFeed","filterDate","startdateupdate","startDate","moment","subtract","format","enddateupdate","endDate","parsed","queryString","parse","search","startdate","enddate","setStartDate","useState","setEndDate","maxDate","setMaxDate","endOf","useEffect","pathname","_Fragment","_jsxs","Link","to","FontAwesomeIcon","type","Nav","defaultActiveKey","as","Item","includes","Button","variant","onClick","refreshButton","OverlayTrigger","placement","overlay","Tooltip","iconClass","DateRangePicker","onApply","handleOnApply","picker","selected_feed_data","initialSettings","locale","separator","showDropdowns","ranges","Today","Yesterday","startOf","toAbsoluteUrl","kFormatter","newValue","suffixNum","Math","floor","shortValue","precision","parseFloat","pow","toPrecision","replace","toFixed","ex","abs","sign","dateFormat","date"],"sourceRoot":""}