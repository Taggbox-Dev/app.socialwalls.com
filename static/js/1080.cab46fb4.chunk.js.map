{"version":3,"file":"static/js/1080.cab46fb4.chunk.js","mappings":"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","sources":["app/Layouts/Main/Analytics/layout/common/popup/popupSearch.js","app/CommonComponents/Paginate.js","app/Layouts/Main/Analytics/layout/common/DataNotFound.js","app/Layouts/Main/Analytics/layout/common/popup/paggination.js","app/Layouts/Main/Analytics/utils/index.js"],"sourcesContent":["    import { Button } from \"react-bootstrap\";\n    import Loader from \"react-loader-spinner\";\n    import SVG from \"react-inlinesvg\";\n    import React, { useEffect } from \"react\"; \n\n    const PS = (props) => {\n    const { isPdfDownloading, analyticsStatus, updateSearchText, placeholder } = props;\n\n    const onSearchText = () => {\n        let textInput = document.getElementById(\"searchTextInfluencer\");\n        let timeout = null;\n        textInput.addEventListener(\"input\", (e) => {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => updateSearchText(textInput.value), 1000);\n        });\n    };\n\n    useEffect(() => {\n        onSearchText()\n    }, []);\n\n    return (\n        <div className=\"d-flex align-items-center justify-content-end mb-3\">\n        <form onSubmit={(e) => e.preventDefault()}>\n            <div className=\"form-group m-0\">\n            <div className=\"input-icon input-icon-right position-relative\">\n                <input className=\"form-control search-input\" id=\"searchTextInfluencer\" type=\"text\" placeholder={placeholder ? placeholder : `Search Post...`} />\n                <span> <i className=\"fa fa-search icon-md text-muted\"></i> </span>\n            </div>\n            </div>\n        </form>\n        </div>\n    );\n    };\n\n    const PopupSearch = React.memo(PS);\n    export default PopupSearch;\n","\nexport const paginate = ( totalItems, currentPage, pageSize, maxPages ) => {\n    // calculate total pages\n    let totalPages = Math.ceil(totalItems / pageSize);\n\n    // ensure current page isn't out of range\n    if (currentPage < 1) {\n        currentPage = 1;\n    } else if (currentPage > totalPages) {\n        currentPage = totalPages;\n    }\n\n    let startPage, endPage;\n    if (totalPages <= maxPages) {\n        // total pages less than max so show all pages\n        startPage = 1;\n        endPage = totalPages;\n    } else {\n        // total pages more than max so calculate start and end pages\n        let maxPagesBeforeCurrentPage = Math.floor(maxPages / 2);\n        let maxPagesAfterCurrentPage = Math.ceil(maxPages / 2) ;\n        if (currentPage <= maxPagesBeforeCurrentPage) {\n            // current page near the start\n            startPage = 1;\n            endPage = totalPages;\n        } else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {\n            // current page near the end\n            // startPage = totalPages - maxPages + 1;\n            startPage = 1;\n            endPage = totalPages;\n        } else {\n            // current page somewhere in the middle\n            startPage = 1//currentPage - maxPagesBeforeCurrentPage;\n            endPage = totalPages//currentPage + maxPagesAfterCurrentPage;\n        }\n    }\n\n    // calculate start and end item indexes\n    let startIndex = (currentPage - 1) * pageSize;\n    let endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n    // create an array of pages to ng-repeat in the pager control\n    let pages = Array.from(Array((endPage + 1) - startPage).keys()).map(i => startPage + i);\n\n    // return object with all pager properties required by the view\n    return {\n        totalItems: totalItems,\n        currentPage: currentPage,\n        pageSize: pageSize,\n        totalPages: totalPages,\n        startPage: startPage,\n        endPage: endPage,\n        startIndex: startIndex,\n        endIndex: endIndex,\n        pages: pages\n    };\n}\n","\nimport React, { Component } from \"react\";\nimport SVG from \"react-inlinesvg\";\nimport { toAbsoluteUrl } from \"../../utils\";\n\n\n\nclass DataNotFound extends Component {\n    render() {\n        return <div className=\"data-not-found-container\">\n            <div className=\"d-flex align-items-center justify-content-center flex-column pt-5\">\n                <SVG className=\"data_not_found mb-5\"\n                    src={toAbsoluteUrl(\"/error/data_not_found.svg\")}\n                />\n                <h5 className=\"h2 text-muted m-0\">Data Not Available</h5>\n            </div>\n        </div>\n    }\n}\nexport default DataNotFound","    import React from \"react\";\n\n    const PN = (props) => {\n\n    const { paginateData, isLoading, total, currentPage, limit } = props  \n\n    const onNextNavigateClick = (event) => {  \n        \n        const {total,limit, maxPage, paginateData,  managePagging } = props  \n\n        let page = 1;\n        if (\n        paginateData &&\n        Object.keys(paginateData).length > 0 &&\n        paginateData.currentPage\n        ) {\n        page = paginateData.currentPage + 1;\n        if (page <= paginateData.totalPages) {\n            managePagging(1,currentPage,0,0,0,0,0)\n        }\n        }\n\n        if (\n        page &&\n        paginateData &&\n        Object.keys(paginateData).length > 0 &&\n        paginateData.totalPages >= page\n        ) {\n            const pageCount = parseInt(page) == 1 ? 0 : parseInt(page) - 1;\n            const offset = parseInt(limit) * pageCount;\n            managePagging(2,0,total, page, limit, maxPage, offset)\n        }\n    };\n\n    const onPrevNavigateClick = (event) => {  \n        const { total,limit, maxPage, paginateData, managePagging } = props  \n        let page = 1;\n        if (\n        paginateData &&\n        Object.keys(paginateData).length > 0 &&\n        paginateData.currentPage\n        ) {\n        page = paginateData.currentPage - 1;\n        if (page != 0) {\n            managePagging(1,page,0,0,0,0,0)\n        }\n        }\n\n        if (page && page > 0) {\n            const pageCount = parseInt(page) == 1 ? 0 : parseInt(page) - 1;\n            const offset = parseInt(limit) * pageCount;\n            managePagging(2,0,total, page, limit, maxPage, offset)\n        }\n    };\n\n    const onUpdatePage = (page) => { \n        const { total,limit, maxPage, managePagging } = props  \n        const pageCount = parseInt(page) == 1 ? 0 : parseInt(page) - 1;\n        const offset = parseInt(limit) * parseInt(pageCount);\n        managePagging(3,0,total, page, limit, maxPage, offset)\n    };\n\n    const onUpdateDataLimit = (event) => {  \n        const { total, maxPage, managePagging } = props  \n\n        const currentPage = 1;\n        const pageCount = 0;\n        const offset = parseInt(event.target.value) * pageCount;\n        managePagging(4,currentPage,total, 0, event.target.value, maxPage, offset)\n    };\n\n    return (\n        <>\n        {!isLoading &&\n        total > 0 &&\n        paginateData &&\n        Object.keys(paginateData).length > 0 ? (\n            <div className=\"w-100 d-flex justify-content-lg-between justify-content-center align-items-center flex-wrap py-sm-4 px-0 pt-3 \">\n                <div className=\"d-flex flex-wrap py-sm-2 me-sm-3 justify-content-sm-normal justify-content-center\">\n                    <a className=\"btn btn-icon btn-sm btn-light btn-hover-dark me-2 my-1 f-center\" onClick={(e) => onPrevNavigateClick(e)}>\n                    <i className=\"fa-solid fa-caret-left icon-md\"></i>\n                    </a>\n\n                    {paginateData.pages && paginateData.pages.length > 0\n                    ? paginateData.pages.map((item, pagesIndex) => {\n                        return parseInt(pagesIndex) < 3 ? (\n                            <a onClick={() => onUpdatePage(item)} className={`btn btn-icon btn-sm border-0 btn-light btn-hover-dark f-center ${ paginateData.currentPage == item ? `active` : `` }  me-2 my-1`} > {item} </a>\n                        ) : parseInt(pagesIndex) < 4 ? (\n                            currentPage < 6 ? (\n                            <a onClick={() => onUpdatePage(item)} className={`btn btn-icon btn-sm border-0 btn-light btn-hover-dark f-center ${ paginateData.currentPage == item ? `active` : `` }  me-2 my-1`} > {item} </a>\n                            ) : (\n                            <a className=\"btn btn-icon btn-sm border-0 btn-hover-dark me-2 my-1\"> ... </a>\n                            )\n                        ) : parseInt(pagesIndex) < 5 ? (\n                            currentPage < 6 ? (\n                            <a onClick={() => onUpdatePage(item)} className={`btn btn-icon btn-sm border-0 btn-light  btn-hover-dark f-center ${ paginateData.currentPage == item ? `active` : `` }  me-2 my-1`} > {item} </a>\n                            ) : (\n                            parseInt(paginateData.pages.length) > currentPage && (\n                                <a onClick={() => onUpdatePage(item)} className={`btn btn-icon btn-sm border-0 btn-light btn-hover-dark f-center ${ paginateData.currentPage ? `active` : `` }  me-2 my-1`} > {currentPage} </a>\n                            )\n                            )\n                        ) : parseInt(paginateData.pages.length) - 2 == pagesIndex ? (\n                            parseInt(paginateData.pages.length) - 1 > currentPage && (\n                            <a className=\"btn btn-icon btn-sm border-0 btn-hover-dark me-2 my-1\"> ... </a>\n                            )\n                        ) : parseInt(paginateData.pages.length) - 1 == pagesIndex ? (\n                            <a onClick={() => onUpdatePage(item)} className={`btn btn-icon btn-sm border-0 btn-light  btn-hover-dark f-center ${ paginateData.currentPage == item ? `active` : `` }  me-2 my-1`} > {item} </a>\n                        ) : null;\n                        })\n                    : null}\n                    <a\n                    className=\"btn btn-icon btn-sm btn-light btn-hover-dark me-2 my-1 f-center\"\n                    onClick={(e) => onNextNavigateClick(e)}\n                    >\n                    <i className=\"fa-solid fa-caret-right icon-md icon-xs\"></i>\n                    </a>\n                </div>\n\n                 <div className=\"d-flex align-items-center py-1 shwoing-filter\">\n                   <select className=\"form-control form-control-sm font-weight-bold me-4 border-0 bg-light false\" style={{ width: 75 }} onChange={(e)=>onUpdateDataLimit(e)} value={limit} >\n                    <option className=\"\" value={10}> 10 </option>\n                    <option className=\"\" value={20}> 20 </option>\n                    <option className=\"\" value={50}> 50 </option>\n                    </select>\n                    <span className=\"react-bootstrap-table-pagination-total\">\n                    &nbsp;Showing rows {paginateData.currentPage} to&nbsp;\n                    {paginateData.totalPages} of&nbsp;{total}\n                    </span>\n                </div> \n            </div>\n        ) : null}\n        </>\n    );\n    };\n\n    const Paggination = React.memo(PN);\n\n    export default Paggination;\n","import axios from 'axios'; \nimport store from '../../../../../store';\nimport { EXPIRE_POST_UPDATE, LIVE_API, NoCameraImgPost } from '../../../../../actions/api';\nimport moment from 'moment';\nimport { GET_INSTAGRAM_IMAGE } from '../../../../../actions/analyticsAction';\n\nexport const toAbsoluteUrl = pathname => `https://cloud.tagbox.com/app/analytics` + pathname;\n\nexport const ordinal_suffix_of = (i) => {\n    var j = i % 10,\n        k = i % 100;\n    if (j == 1 && k != 11) {\n        return i + \"st\";\n    }\n    if (j == 2 && k != 12) {\n        return i + \"nd\";\n    }\n    if (j == 3 && k != 13) {\n        return i + \"rd\";\n    }\n    return i + \"th\";\n}\n\nexport const secondsToTime = (secs) => {\n    // var hours = Math.floor(secs / (60 * 60));\n    // var divisor_for_minutes = secs % (60 * 60);\n    // var minutes = Math.floor(divisor_for_minutes / 60);\n\n    // var divisor_for_seconds = divisor_for_minutes % 60;\n    // var seconds = Math.ceil(divisor_for_seconds);\n    // return `${hours}:${minutes}:${seconds}`;\n\n    var sec_num = parseInt(secs, 10); // don't forget the second param\n    var hours = Math.floor(sec_num / 3600);\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n    if (hours < 10) { hours = \"0\" + hours; }\n    if (minutes < 10) { minutes = \"0\" + minutes; }\n    if (seconds < 10) { seconds = \"0\" + seconds; }\n\n    return hours + ':' + minutes + ':' + seconds;\n\n\n}\n\nexport const getTimeTypeSecondToTime = (secs, type) => {\n    let dataTime = secondsToTime(secs);\n    let acrtualTime = dataTime.split(':')\n    if (type == 1) {\n        if (acrtualTime && acrtualTime.length) return acrtualTime[0];\n        else return 0;\n    }\n    else if (type == 2) {\n\n        if (acrtualTime && acrtualTime.length) return acrtualTime[1];\n        else return 0;\n    }\n    else if (type == 3) {\n        if (acrtualTime && acrtualTime.length) return acrtualTime[2];\n        else return 0;\n    }\n}\nexport const validURL = (str) => {\n    var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n        '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n    return !!pattern.test(str);\n}\n\nexport const convertIntToBool = (value) => {\n    if (value) return Boolean(value)\n    else return value;\n\n}\n\n\nexport const customClass = {\n    confirmButton: 'btn-primary btn-min-w btn btn-primary',\n    cancelButton: 'border-btn btn-outline-dark me-4 btn-min-w btn btn-primary',\n}\n\n\nexport const updateURLForIframe = (url) => {\n    if (url && url.includes('youtube.com')) {\n        const urlSplits = url.split('?v=');\n        if (urlSplits && urlSplits.length && urlSplits[1]) {\n            url = `https://www.youtube.com/embed/${urlSplits[1]}`;\n        }\n    }\n    else if (url && url.includes('vimeo.com')) {\n        const urlSplits = url.split('/');\n        if (urlSplits && urlSplits.length && urlSplits[urlSplits.length - 1]) {\n            url = `https://player.vimeo.com/video/${urlSplits[urlSplits.length - 1]}?autoplay=1&loop=1&autopause=0`;\n        }\n    }\n    return url;\n}\n\nexport const getSecondsFromTime = (time) => {\n    let actualTime = time.split(':');\n    let totalSeconds = (+actualTime[0]) * 60 * 60 + (+actualTime[1]) * 60 + (+actualTime[2]);\n    return totalSeconds;\n}\n\nexport const loaderCircleStyle = { padding: 1, color: '#545454', fontSize: 10 }\nexport const getPosition = (partitions, currentSceneContent) => {\n    const getPartitions = Object.keys(partitions).map((item) => ({ position: item, name: partitions[item] }))\n    const filterData = getPartitions.filter((item) => item.name == currentSceneContent.name);\n    return filterData;\n}\nexport const GET_HEIGHT_WIDTH = (cssStyle, position, layouts, mixContentType) => {\n\n    const actualLayout = layouts.filter((item) => item.id == mixContentType)\n\n    if (actualLayout && actualLayout[0]) {\n\n\n        const currentHeightWidth = GET_DYNAMIC_HEIGHT_WIDTH(cssStyle, position);\n        const actualDefault = GET_DYNAMIC_HEIGHT_WIDTH(actualLayout[0].css, position);\n        if (actualDefault && Object.keys(actualDefault).length) {\n            if (parseInt(actualDefault.height) > parseInt(actualDefault.width)) {\n                return { width: currentHeightWidth.width, height: 0, label: \"Width\" }\n            }\n            else if (parseInt(actualDefault.height) < parseInt(actualDefault.width)) {\n                return { height: currentHeightWidth.height, width: 0, label: \"Height\" }\n            }\n            else {\n                if (mixContentType == 1) {\n                    return { height: currentHeightWidth.height, width: 0, label: \"Height\" }\n                }\n                else {\n                    return { height: 0, width: 0 }\n                }\n            }\n        }\n        else {\n            return currentHeightWidth;\n        }\n    }\n}\n\nconst GET_DYNAMIC_HEIGHT_WIDTH = (cssStyle, position) => {\n    const cData = cssStyle.split(\"#zone\");\n\n    var height = \"\"; var width = \"\";\n    if (cData && cData.length) {\n        cData.map((item, index) => {\n            const trimContent = item.trim()\n            const firstValue = trimContent.charAt(0);\n            if (firstValue == position[0].position) {\n                const replaceValue = item.split(\";\")\n                if (replaceValue && replaceValue.length) {\n                    replaceValue.map((rItem) => {\n                        const getHeightWidth = rItem.split(\":\");\n                        if (getHeightWidth && getHeightWidth[0] && getHeightWidth[0] == \"height\") height = getHeightWidth[1].replace(\"%\", \"\");\n                        if (getHeightWidth && getHeightWidth[0] && getHeightWidth[0] == \"width\") width = getHeightWidth[1].replace(\"%\", \"\");\n                    })\n                }\n            }\n        })\n    }\n    return { height, width, }\n}\n\nexport const convertHMS = (timeString) => {\n    const arr = timeString.split(\":\");\n    const seconds = arr[0] * 3600 + arr[1] * 60 + (+arr[2]);\n    return seconds;\n}\n\n\n\n\nexport const getRandomArbitrary = (min, max) => {\n    return parseInt(Math.random() * (max - min) + min);\n}\n\nexport const additionArrayData = (data) => {\n    if (data && data.length > 0) {\n        return data.reduce((total, num) => total + num)\n    }\n    else return 0\n}\n\nexport const kFormatter = (value) => {\n    // return Math.abs(num) > 999 ? Math.sign(num) * ((Math.abs(num) / 1000).toFixed(1)) + 'k' : Math.sign(num) * Math.abs(num)\n\n\n    // return Math.abs(Number(num)) >= 1.0e+9 ? (Math.abs(Number(num)) / 1.0e+9).toFixed(2) + \"B\" : Math.abs(Number(num)) >= 1.0e+6 ? (Math.abs(Number(num)) / 1.0e+6).toFixed(2) + \"M\" : Math.abs(Number(num)) >= 1.0e+3 ? (Math.abs(Number(num)) / 1.0e+3).toFixed(2) + \"K\" : Math.abs(Number(num));\n    try {\n\n\n        var newValue = value;\n        if (value >= 1000) {\n            var suffixes = [\"\", \"K\", \"M\", \"B\", \"T\"];\n            var suffixNum = Math.floor((\"\" + value).length / 3);\n            var shortValue = '';\n            for (var precision = 2; precision >= 1; precision--) {\n                shortValue = parseFloat((suffixNum != 0 ? (value / Math.pow(1000, suffixNum)) : value).toPrecision(precision));\n                var dotLessShortValue = (shortValue + '').replace(/[^a-zA-Z 0-9]+/g, '');\n                if (dotLessShortValue.length <= 2) { break; }\n            }\n            if (shortValue % 1 != 0) shortValue = shortValue.toFixed(1);\n            newValue = shortValue + suffixes[suffixNum];\n        }\n        return newValue;\n    }\n    catch (ex) {\n        return Math.abs(value) > 999 ? Math.sign(value) * ((Math.abs(value) / 1000).toFixed(1)) + 'k' : Math.sign(value) * Math.abs(value)\n    }\n\n}\nexport const OverviewChartFormatting = (formattingData) => {\n    let data = [];\n    if (formattingData && formattingData.length > 0) {\n        formattingData.map((item) => {\n            data.push({\n                name: item.name,\n                type: 'line',\n                data: dataConvertToInt(item.data)\n            })\n        })\n        return data;\n    }\n    else return formattingData;\n}\n\nexport const dataConvertToInt = (formateIntData) => {\n    let updateData = [];\n    if (formateIntData && formateIntData.length > 0) {\n        formateIntData.map((item) => {\n            updateData.push(parseInt(item))\n\n        })\n        return updateData\n\n\n    }\n    else return formateIntData\n\n}\n\n\nexport const networkURLIsValid = (str) => {\n    let output = str;\n    let matches;\n    matches = str.match(/(?:https?:\\/\\/)?(?:www.)?(?:twitter|medium|facebook|vimeo|instagram|google|pinterest|flickr|youtube|linkedin|vkontakte|vk|tiktok|soundcloud|giphy|airbnb|yammer|slack|yelp|workplace|rss|tumblr)(?:.com\\/)?([@a-zA-Z0-9-_]+)/im);\n    if (matches && matches.length > 0) return true\n    else return false;\n}\n\nexport const capitalizeFirstLetter = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst UPDATE_INSTAGRAM_IMAGE_VIDEO = `https://${LIVE_API ? 'app' : 'test'}.taggbox.com/display/post/update`;\nconst NO_CAMERA_IMAGE = NoCameraImgPost;\nconst updateStatusRenewImage = (wallId, postId, table_name, e) => {\n    const { moderation, authenticated } = store.getState();\n    const { details, listData } = moderation;\n    const { userData } = authenticated;\n    const postData = listData.length > 0 ? listData.filter((val) => val.id == postId) : []\n    const url = details?.wall?.url;\n    const table = userData.UserPlan.db_table;\n    let dataFormatted = {\n        wallId: wallId,\n        postId: postId,\n        table_name: table,\n        ownerId: localStorage.getItem('ownerId'),\n        feedId: postData.length > 0 ? postData[0].feedId : '',\n        type: postData.length > 0 ? postData[0].type : '',\n        link: postData.length > 0 ? postData[0].link : '',\n        postFile: postData.length > 0 ? postData[0].postFile : '',\n        mediaFile: postData.length > 0 ? postData[0].mediaFile : '',\n        url: url\n    }\n    axios.post(EXPIRE_POST_UPDATE, dataFormatted).then(({ data }) => {\n        e.target.src = data.media;\n        e.target.attributes[\"data-load\"].value = \"1\";\n    })\n}\n\nexport const updateInstagramPostImage = (data) => {\n    const { authenticated } = store.getState();\n    const { userData } = authenticated;\n    const table = userData.UserPlan.db_table;\n\n    let dataFormatted = {\n        ...data,\n        table_name: table\n    }\n    axios.post(`${UPDATE_INSTAGRAM_IMAGE_VIDEO}`, dataFormatted)\n        .then((response) => { })\n        .catch((error) => {\n            console.error(error);\n        });\n};\n\nconst FETCH_LINK = (fetchUrl, postId, dataSrc, type) => GET_INSTAGRAM_IMAGE(fetchUrl).then((response) => {\n    let html = response.data;\n    if (html) {\n        var regex = /_sharedData = ({.*);<\\/script>/m,\n            json = JSON.parse(regex.exec(html)[1]);\n        if (typeof json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children !== 'undefined') {\n            if (type == 'video') {\n                const videoPath = json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children.edges.filter((item) => item.node.shortcode == postId[4])[0].node.video_url\n                return videoPath;\n            } else {\n                const imagePath = json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children.edges.filter((item) => item.node.shortcode == postId[4])[0].node.display_url\n                return imagePath;\n            }\n        }\n        else if (json.entry_data.PostPage[0].graphql.shortcode_media.__typename === 'GraphVideo') {\n\n            if (json.entry_data.PostPage[0].graphql.shortcode_media.is_video) {\n                return { video_url: json.entry_data.PostPage[0].graphql.shortcode_media.video_url, display_url: json.entry_data.PostPage[0].graphql.shortcode_media.display_url }\n            }\n        }\n        else {\n            return json.entry_data.PostPage[0].graphql.shortcode_media.display_url;\n        }\n    }\n\n}).catch((error) => {\n    if (dataSrc.includes(\"cdn.taggbox.com\")) return NO_CAMERA_IMAGE;\n    else return NO_CAMERA_IMAGE;\n})\n\n\nexport const IMG_LOAD_AFTER_COMPLETE_LAYOUT = async (e) => {\n    // return\n    e.persist()\n   \n    const { userData } = store.getState().authenticated;\n    const table_name = userData.UserPlan.db_table;\n    const network = e.target.getAttribute(\"data-network\")\n    const wallId = e.target.getAttribute(\"data-wall-id\");\n    const postId = e.target.getAttribute(\"data-item-id\");\n    const filterId = e.target.getAttribute(\"data-filter-id\");\n    let links = e.target.getAttribute(\"data-link\");\n    let image_update = '';\n    let video_update = '';\n    // const UserDetail = store.getState();\n    if (network) {\n        const dataSrc = e.target.src;\n        if ((network == 2 || network == 18 || network == 3 || network == 28) && (dataSrc.includes(\"cloud.taggbox.com\") || dataSrc.includes(\"cdn.taggbox.com\") || dataSrc.includes(\"cdninstagram.com\") || dataSrc.includes(\"no-camera.svg\") || dataSrc.includes(\"instagram-no-image\") || network == 3 || network == 28) && e.target.getAttribute(\"data-load\") == 0 && filterId != \"34\") {\n            if ((network == 2 || network == 18)) {\n                let postLinkId = links.split('/');\n                let fetchUrl = `https://images${~~(Math.random() * 3333)}-focus-opensocial.googleusercontent.com/gadgets/proxy?container=none&url=${links}`;\n                let IMG_URL_UPDATE = await FETCH_LINK(fetchUrl, postLinkId, dataSrc, 'image')\n                if (IMG_URL_UPDATE && IMG_URL_UPDATE != null && IMG_URL_UPDATE.length > 0 && typeof IMG_URL_UPDATE === 'string' && (IMG_URL_UPDATE.includes(\"no-camera.svg\") || IMG_URL_UPDATE.includes(\"lookaside.instagram.com\"))) {\n                    updateStatusRenewImage(wallId, postId, table_name, e)\n                }\n                else {\n                    if (IMG_URL_UPDATE && IMG_URL_UPDATE != null && IMG_URL_UPDATE.length > 0 && typeof IMG_URL_UPDATE === 'string') {\n                        e.target.src = `https://images.taggbox.com/${IMG_URL_UPDATE}`;\n                        image_update = IMG_URL_UPDATE;\n                        e.target.attributes[\"data-load\"].value = \"1\";\n                        if (IMG_URL_UPDATE.includes(\"no-camera.svg\")) {\n                            e.target.style = \"visibility:visible!important;width:180px;margin:20px auto;object-fit: contain;\";\n                        }\n                        e.target.style = \"\";\n                    }\n                    else {\n                        if (IMG_URL_UPDATE.display_url && IMG_URL_UPDATE.display_url.includes(\"lookaside.instagram.com\")) {\n                            updateStatusRenewImage(wallId, postId, table_name, e)\n                        }\n                        else {\n                            e.target.src = `https://images.taggbox.com/${IMG_URL_UPDATE.display_url}`;\n                            image_update = IMG_URL_UPDATE.display_url;\n                            video_update = IMG_URL_UPDATE.video_url;\n                            e.target.attributes[\"data-load\"].value = \"1\";\n                            if (IMG_URL_UPDATE.display_url.includes(\"no-camera.svg\")) {\n                                e.target.style = \"visibility:visible!important;width:180px;margin:20px auto;object-fit: contain;\";\n                            }\n                            e.target.style = \"\";\n                        }\n                    }\n                    if (!image_update.includes(\"no-camera.svg\") && !image_update.includes(\"cdn.taggbox.com\") && !image_update.includes(\"lookaside.instagram.com\")) {\n\n                        updateInstagramPostImage({\n                            ownerId: localStorage.getItem('ownerId'),\n                            wallId: wallId,\n                            postFile: image_update,\n                            video: video_update,\n                            type: 2,\n                            postId: postId,\n                            table_name: table_name\n                        });\n                    }\n                }\n\n            }\n            else {\n                const { details, listData } = store.getState().moderation;\n                const postData = listData.length > 0 ? listData.filter((val) => val.id == postId) : []\n                const url = details?.wall?.url;\n\n                let dataFormatted = {\n                    wallId: wallId,\n                    postId: postId,\n                    table_name: table_name,\n                    ownerId: localStorage.getItem('ownerId'),\n                    feedId: postData.length > 0 ? postData[0].feedId : '',\n                    type: postData.length > 0 ? postData[0].type : '',\n                    link: postData.length > 0 ? postData[0].link : '',\n                    postFile: postData.length > 0 ? postData[0].postFile : '',\n                    mediaFile: postData.length > 0 ? postData[0].mediaFile : '',\n                    url: url\n                }\n                axios.post(EXPIRE_POST_UPDATE, dataFormatted).then(({ data }) => {\n                    e.target.src = data.media;\n                    e.target.attributes[\"data-load\"].value = \"1\";\n\n                })\n            }\n        }\n        else {\n            if (dataSrc.includes(\"no-camera.svg\")) {\n                e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\n            }\n            else {\n                e.target.src = NO_CAMERA_IMAGE;\n                e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\n\n            }\n            e.target.attributes[\"data-load\"].value = \"1\";\n        }\n\n    }\n    else {\n        e.target.src = NO_CAMERA_IMAGE;\n        e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\n\n    }\n\n}\n\n\nexport const removeHttp = (str) => {\n    return str.split('//')[1].replace(/\\/$/, \"\").replace(/^www\\./, '')\n}\n\n\nexport const dateFormat = (date) =>{\n    return moment(date).format(\"YYYY-MM-DD HH:mm:ss\")\n}\n\n\n "],"names":["PS","props","isPdfDownloading","analyticsStatus","updateSearchText","placeholder","useEffect","onSearchText","textInput","document","getElementById","timeout","addEventListener","e","clearTimeout","setTimeout","value","_jsx","className","children","onSubmit","preventDefault","_jsxs","id","type","React","paginate","totalItems","currentPage","pageSize","maxPages","startPage","endPage","totalPages","Math","ceil","floor","startIndex","endIndex","min","pages","Array","from","keys","map","i","DataNotFound","Component","render","SVG","src","toAbsoluteUrl","PN","paginateData","isLoading","total","limit","onUpdatePage","page","maxPage","managePagging","pageCount","parseInt","_Fragment","Object","length","onClick","event","onPrevNavigateClick","item","pagesIndex","onNextNavigateClick","style","width","onChange","offset","target","onUpdateDataLimit","pathname","kFormatter","newValue","suffixNum","shortValue","precision","parseFloat","pow","toPrecision","replace","toFixed","ex","abs","sign","dateFormat","date","moment","format"],"sourceRoot":""}