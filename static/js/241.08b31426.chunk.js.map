{"version":3,"file":"static/js/241.08b31426.chunk.js","mappings":"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","sources":["app/Layouts/Main/Analytics/content/components/authorInfo.js","app/Layouts/Main/Analytics/layout/common/networkIcon.js","app/Layouts/Main/Dashboard/components/skeleton/socialactionSkeleton.js","app/Layouts/Main/Dashboard/components/socialAction.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getFirstLetterOfString, manageSpace } from \"../../../../../../utils\";\nimport moment from \"moment\";\nimport NetworkIcon from \"../../layout/common/networkIcon\";\n\nconst AuthorInfo = (props) => {\n\n  const { isSplide,link,networkId,topperfoming,picture,authorUsername,authorName }  =props\n  const [imageError, setImageError] = useState(false);\n\n  const redirectTo=(id,username,link)=> {\n\n     if(![7].includes(id) && link && username){\n\n       let redirectLink = ``\n\n        if(props.link.includes('tiktok')){\n           redirectLink = `/search?q=${manageSpace(username)}`\n          }else if(props.link.includes('linkedin')){\n            redirectLink = `/search/results/all/?keywords=${manageSpace(username)}`\n           }\n          else{\n          redirectLink = `/${manageSpace(username)}`\n        }\n        window.open(`https://${new URL(props.link).hostname}${redirectLink}`)\n     }\n  }\n\n \n  return (\n    props && props!=undefined  ?  \n    <div onClick={() => redirectTo(props.networkId,props.authorUsername,props.link) } className={`d-flex align-items-center ${!props.topperfoming ? 'w-50' : 'me-10'}`}>\n   \n      <div  className=\"position-relative\">\n        <div className=\"symbol symbol-35 symbol-light me-3 con_user_img cursor-pointer rounded-circle overflow-hidden\">\n          {imageError ? (\n            <div className=\"symbol-image\">{getFirstLetterOfString(props.authorName)}</div>\n          ) : (\n            <img\n              onError={() => setImageError(true)}\n              src={props.picture}\n              className=\"img-fluid symbol-image\"\n              width={\"20px\"}\n              height={\"20px\"}\n            />\n          )}\n        </div>\n\n     \n        {props.isIcon && !props.nIcon ? (\n          <div className=\"m_social_icon_new card-shadow position-absolute bg-white rounded-circle d-flex align-items-center justify-content-center\">\n              <NetworkIcon icon={props.isIcon}/>\n          </div>\n        ) : null}\n      </div>\n      <div className=\"d-flex text-left flex-column conn_user_info cursor-pointer\">\n        <p className=\"text-dark mb-0 font-weight-boldest overflow-hidden text-nowrap text-ellipsis author_name text-capitalize\">\n          {props.authorName}\n        </p>\n        <p className=\"m-0 d-flex conn_auther_info\">\n          <small className=\"overflow-hidden text-nowrap text-ellipsis post_count me-2 \">\n            {props.authorUsername ? `@${props.authorUsername}` : props.authorName}\n          </small>\n         { props.date ? \n         <><small className=\"overflow-hidden text-nowrap text-ellipsis saprator-dot me-2 \"></small>\n         <small className=\"overflow-hidden text-nowrap text-ellipsis \">\n           {moment(new Date(props.date * 1000)).fromNow()}\n         </small></> : null }\n        </p>\n      </div>\n    </div> : null\n  );\n};\n\nexport default React.memo(AuthorInfo);\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"../../../../../CommonComponents/AssetsHelper\";\n\nconst NetworkIcon = (props) => { \n  return (\n    <> \n    <FontAwesomeIcon icon={props?.icon.includes(\"twitter\") ? 'x-twitter' : props?.icon?.replace('fa-','')} iconClass={`${props?.icon == 'fa-rss' ? \"\" : 'fa-brands fab'} ${props.isDashboard ? props.isDashboard : ''}`} /> \n    </>\n  );\n};\n\nexport default React.memo(NetworkIcon);\n","import React from \"react\";\nconst SocialactionSkeleton = () => {\n  return (\n    <div className=\"scroll scroll-pull\" data-scroll=\"true\" data-wheel-propagation=\"true\" >\n      {[1, 2, 3, 4].map(() => {\n        return (\n          <div className=\"d-flex align-items-center p-2 border rounded mb-3\">\n            <div className=\"d-flex align-items-center flex-grow-1\">\n              <div className=\"symbol symbol-45 symbol-light me-2 con_user_img\">\n                <span className=\"sk_img\"></span>\n              </div>\n              <div className=\"d-flex text-left flex-column conn_user_info w-25\">\n                <div className=\"sk_line sk_line_height_12 mb-2\"></div>\n                <div className=\"sk_line sk_line_50 sk_line_height_10 mt-2\"></div>\n              </div>\n            </div>\n            <div className=\"conn_status connnected text-right w-25\">\n              <div className=\"sk_line sk_line_height_12\"></div>\n              <div className=\"sk_line sk_line_80 sk_line_height_10\"></div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default React.memo(SocialactionSkeleton);\n","import React, { useEffect } from \"react\";\nimport { Button, Card } from \"react-bootstrap\";\nimport AuthorInfo from \"../../Analytics/content/components/authorInfo\";\nimport { useDispatch } from \"react-redux\";\nimport { baseUrl, isAppleSafari, showAddAccountAlertNew, } from \"../../../../../utils\";\nimport { Link } from \"react-router-dom\";\nimport parse from \"html-react-parser\";\nimport SocialactionSkeleton from \"./skeleton/socialactionSkeleton\";\nimport { MediaBaseUrl } from \"../../../../../actions/api\";\nimport { addUserAccount } from \"../../../../Authorization/SocialAuth/connectSocialAcc\";\nimport { social_account } from \"../../../../../actions/dashboardActions\";\nimport { FontAwesomeIcon } from \"../../../../CommonComponents/AssetsHelper\";\n\nconst SocialAction = (props) => {\n    const { connectedAccounts, feeds, loader } = props;\n    const channel = isAppleSafari() ? window : new BroadcastChannel(\"connect\");\n    const dispatch = useDispatch();\n\n    const connectaccount = (item, reconnect) => {\n        let refresh = 0;\n        if (reconnect) { refresh = 1; }\n        localStorage.setItem(\"refresh\", refresh);\n        dispatch(showAddAccountAlertNew(item, \"dashboardConnect\"));\n    };\n\n    const readAuthenticationCode = (event) => {\n        const response = JSON.parse(event.data);\n        const { data, networkId, type } = response;\n        if (type == \"dashboardConnect\")\n            addUserAccount(networkId, data, () => dispatch(social_account()), localStorage.getItem(\"ownerId\"), 0, Number(localStorage.getItem(\"refresh\")));\n        localStorage.removeItem(\"refresh\");\n    };\n\n    useEffect(() => {\n        channel.addEventListener(\"message\", readAuthenticationCode);\n        return () => { channel.removeEventListener(\"message\", readAuthenticationCode); };\n    }, []);\n\n    return (\n        <div className=\"col-md-6 mb-3\">\n            <div className=\"socialAccount-post-section h-100\">\n                <Card className=\"p-0 card-custom card-stretch\">\n                    <Card.Header className=\"p-3\">\n                        <div className=\"m-0 d-flex align-items-center justify-content-between card-title h5 w-100\">\n                            <h6 className=\"card-label font-weight-bolder m-0 \"> Social Accounts </h6>\n                            {connectedAccounts && Object.keys(connectedAccounts).length ? (\n                                <div className=\"\"> <Link to={`/transactions#connectedAccounts`} className=\"text-secondary font-size-base\" > View All </Link> </div>\n                            ) : null}\n                        </div>\n                    </Card.Header>\n                    <Card.Body className=\"p-3\">\n                        {loader ? (<SocialactionSkeleton />)\n                            : (feeds && Object.keys(feeds).length) || (connectedAccounts && Object.keys(connectedAccounts).length) ? (\n                                <>\n                                    {feeds.map((feeddata, index) => {\n                                        var btntext = \"\";\n                                        if (feeddata.Feed.accountId == \"\") { btntext = \"Connect\"; } \n                                        else { btntext = \"Reconnect\"; }\n\n                                        return (\n                                            <div className=\"mb-3\">\n                                                <div className=\"mb-4 last-child-mb-0 d-block text-secondary\">\n                                                    <div className=\"p-3 border rounded\">\n                                                        <div className=\"d-flex align-items-center pt-2 pb-2 users_row justify-content-between\" key={index} >\n                                                            <div className=\"d-flex align-items-center flex-grow-1\">\n                                                                <div className=\"symbol symbol-45 symbol-light me-4 con_user_img ms-1 flex-shrink-0\">\n                                                                    {![\"fa-twitter\"].includes(feeddata.Network.icon) ?\n                                                                        <span style={{ backgroundImage: `url(${baseUrl(`social-icons-feed/${feeddata.Network.icon}.svg`)})`, backgroundSize: \"70%\", backgroundPosition: \"center\", backgroundRepeat: \"no-repeat\", }} ></span>\n                                                                        : <FontAwesomeIcon type={'brands'} icon={'square-x-twitter'} iconClass={''} />\n                                                                    }\n                                                                </div>\n\n                                                                <div className=\"d-flex text-left flex-column conn_user_info w-75 flex-grow-1\">\n                                                                    <p title=\"From Hashtag(#)\" className=\"text-dark m-0 text-nowrap d-flex align-items-center\" >\n                                                                        <strong className=\"text-dark mb-0 font-weight-boldest overflow-hidden text-nowrap text-ellipsis mx-width-250 text-capitalize\"> {parse(feeddata.Feed.feedName)} </strong>\n                                                                        {feeddata.Feed.socialLink ? (<Link to={feeddata.Feed.socialLink} target=\"_blank\" > <i className=\"fa fa-external-link-alt icon-nm ms-1\"></i> </Link>) : null}\n                                                                    </p>\n                                                                </div>\n                                                            </div>\n\n                                                            <div className=\"conn_status disconnnected text-right\">\n                                                                <div className=\"conn_status_wrap\">\n                                                                    {![10, 19, 15, 7, 23, 29].includes(feeddata.Network.id) && (\n                                                                        <a onClick={() => connectaccount(feeddata.Network, true)} className=\"btn btn-outline-primary openGoogleReconnect btn-xs\" data-action=\"reconnect\" data-src={``}> <span> {btntext}</span> </a>\n                                                                    )}\n                                                                </div>\n                                                                <small className=\"font-size-sm font-size-sm-network\">{feeddata.Network.name} Profile</small>\n                                                            </div>\n\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        );\n                                    })}\n\n                                    {connectedAccounts && Object.keys(connectedAccounts).length\n                                        ? connectedAccounts.map((e) => {\n                                            const getData = e.ConnectedAccounts;\n                                            return (\n                                                <div className=\"mb-3\">\n                                                    <div className=\"mb-4 last-child-mb-0 d-block text-secondary\">\n                                                        <div className=\"p-3 border rounded\">\n                                                            {\" \"}\n                                                            <div className=\" d-flex align-items-center justify-content-between\">\n                                                                <AuthorInfo isIcon={e.Network.icon} picture={getData.profilePicture} authorUsername={e.accountName} authorName={getData.accountName} link={\"\"} networkId={getData.networkId} />\n                                                                <div className=\"\">\n                                                                    <h5>\n                                                                        {getData.api == 2 ? (\n                                                                            <div className=\"conn_status connnected text-right\">\n                                                                                <div className=\"conn_status_wrap font-size-lg m-0\">\n                                                                                    <p className=\"font-weight-bolder acc_status m-0\">\n                                                                                        <FontAwesomeIcon type={'regular'} icon={'check'} iconClass={'me-1 text-success'} />{\" \"}\n                                                                                        Connected\n                                                                                    </p>\n                                                                                </div>\n                                                                                <small className=\"font-size-sm font-size-sm-network\"> {e.Network.name} Profile </small>\n                                                                            </div>\n                                                                        ) : (\n                                                                            <div className=\"conn_status disconnnected text-right\">\n                                                                                <div className=\"conn_status_wrap\">\n                                                                                    {![10, 19, 15, 7, 23, 29].includes( e.Network.id ) && (\n                                                                                            <Button variant=\"outline-primary\" onClick={() => connectaccount(e.Network, true)} className=\"openGoogleReconnect btn-xs\" data-action=\"reconnect\" data-src={``}> <span>Reconnect</span> </Button>\n                                                                                        )}\n                                                                                </div>\n                                                                                <small className=\"font-size-sm font-size-sm-network\">{e.Network.name} Profile</small>\n                                                                            </div>\n                                                                        )}\n                                                                    </h5>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            );\n                                        })\n                                        : null}\n                                </>\n                            ) : (\n                                <div className=\"not_connected_err not_connected_err_new flex-center overlay-layer d-flex flex-column flex-center\" style={{ backgroundImage: `url(${MediaBaseUrl}error/not-connected-new.png)`, }} >\n                                    <div className=\"not_conne_overlay d-flex flex-column flex-center\"> <Link to={`/transactions#connectedAccounts`} className=\"btn btn-primary\" > Connect </Link> </div>\n                                </div>\n                            )}\n                    </Card.Body>\n                </Card>\n            </div>\n        </div>\n    );\n};\n\nexport default React.memo(SocialAction);\n"],"names":["AuthorInfo","props","isSplide","link","networkId","topperfoming","picture","authorUsername","authorName","imageError","setImageError","useState","undefined","_jsxs","onClick","redirectTo","id","username","includes","redirectLink","manageSpace","window","open","URL","hostname","className","children","_jsx","getFirstLetterOfString","onError","src","width","height","isIcon","nIcon","NetworkIcon","icon","date","_Fragment","moment","Date","fromNow","React","_props$icon","FontAwesomeIcon","replace","iconClass","isDashboard","SocialactionSkeleton","map","SocialAction","connectedAccounts","feeds","loader","channel","isAppleSafari","BroadcastChannel","dispatch","useDispatch","connectaccount","item","reconnect","refresh","localStorage","setItem","showAddAccountAlertNew","readAuthenticationCode","event","response","JSON","parse","data","type","addUserAccount","social_account","getItem","Number","removeItem","useEffect","addEventListener","removeEventListener","Card","Header","Object","keys","length","Link","to","Body","feeddata","index","btntext","Feed","accountId","Network","style","backgroundImage","baseUrl","backgroundSize","backgroundPosition","backgroundRepeat","title","feedName","socialLink","target","name","e","getData","ConnectedAccounts","profilePicture","accountName","api","Button","variant","MediaBaseUrl"],"sourceRoot":""}