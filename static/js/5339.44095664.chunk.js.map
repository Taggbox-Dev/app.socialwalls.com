{"version":3,"file":"static/js/5339.44095664.chunk.js","mappings":"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","sources":["app/Layouts/Main/Analytics/layout/skeleton/imageSkeleton.js","app/Layouts/Main/Analytics/layout/common/graph/sentimentChart.js","app/Layouts/Main/Analytics/layout/common/filterModeration.js","app/Layouts/Main/Analytics/layout/common/sectionHeading.js","app/Layouts/Main/Analytics/utils/index.js","app/Layouts/Main/Analytics/content/components/sentimentAnalytics.js"],"sourcesContent":["import React from \"react\";\nimport { baseUrl } from \"../../../../../../utils\";\n\nconst ImageSkeleton = (props) => {\n  return (\n    <div className=\"py-1 text-center\" style={{ backgroundImage: `url(${baseUrl(`dashboard/analytic/content-analytis-5.svg`)})` }}></div>\n  );\n};\n\nexport default React.memo(ImageSkeleton)","\nimport React, { PureComponent } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport moment from \"moment\";\nexport default class SentimentChart extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    const analyticgetData = this.props.contentAnalyticsData\n\n    const getData = analyticgetData.newSeries && analyticgetData.newSeries[0]['data']\n    const lastCategory = getData && Object.keys(getData).length && getData.length-1; // Use dynamic category if needed\n    const seriesData   = getData && Object.keys(getData).length && getData;\n    const maxData = getData && Object.keys(getData).length && getData.some(value => value[1] > 0) ? 1 : 0;\n\n    const uniqueData = getData && Object.keys(getData).length && getData.reduce((acc, item) => {\n      let getItem = Number(item[1])\n       if (!acc.includes(getItem)) {\n        acc.push(getItem);\n      }\n      return acc;\n    }, []);\n    \n   \n    this.state = {\n      series: analyticgetData ? analyticgetData.newSeries : [],\n      options: {\n        colors: [\"#546FED\"],\n        chart: {\n          id: \"area-datetime\",\n          toolbar: { show: false },\n          type: \"line\",\n          animations: {\n            enabled: true,\n            easing: \"linear\",\n            dynamicAnimation: {\n              speed: 1000,\n            },\n          },\n          height: 350,\n          zoom: { enabled: false },\n        },\n        legend: {\n          show: true,\n          position: \"top\",\n          itemMargin: {\n            horizontal: 20,\n            vertical: 0,\n          },\n        },\n        dataLabels: { enabled: false },\n        markers: { \n        size: maxData && uniqueData.length>1 ? 4 : 0, style: \"hollow\" },\n        stroke: {\n          width: [maxData ? 4 : 0],\n          curve: \"straight\",\n        },\n        xaxis: {\n          type: \"datetime\", \n          min: analyticgetData ? analyticgetData.unixDate && analyticgetData?.unixDate[0] : [],\n          max: analyticgetData ? (analyticgetData.unixDate && analyticgetData?.unixDate[lastCategory]) + (2 * 60 * 60 * 1000) : [], // Subtract 2 hours from the end time\n          labels: {  \n            formatter: (value) => {\n              return moment(value).format('HH:mm')\n            }\n          },\n          show: analyticgetData ? true :  false, // Hides only the x-axis labels\n          tooltip: {\n            shared: true,\n            intersect: false, // Allows tooltip to show when hovering near the points\n            formatter: function (value) {\n              return moment(value).format('DD-MM-YY HH:mm')\n            },\n            \n          }\n          ,tickPlacement: 'on', // Optional: places ticks directly on the x-axis labels\n\n        },\n        yaxis: {\n          min: 0,   // Fixing the y-axis minimum value to 0\n          max: 100, // Fixing the y-axis maximum value to 100\n          labels: {\n            formatter: function (value) {\n              return Math.round(value); // Rounds the value to the nearest integer\n            }\n          }\n        },\n      \n        annotations: {\n          points: [\n            {\n              x: seriesData ? lastCategory && seriesData[lastCategory][0]-1 : 0, // Dynamically set based on last category\n              y: seriesData ? lastCategory && seriesData[lastCategory][1] : 0, // Last data point\n              marker: {\n                size: maxData ? 10 : 0, // Highlight the last marker\n                fillColor: \"#546FED\",\n                strokeColor: \"#2545d7\",\n                shape: \"circle\",\n                cssClass: \"blinking-marker\", // Apply custom CSS class for blinking effect\n              },\n              label: {\n                borderColor: \"#546FED\",\n                offsetY: -10, // Move the label higher to avoid overlap\n                offsetX: -10, // Move the label higher to avoid overlap\n                style: {\n                  color: \"#546FED\",\n                  background: \"transparent\", // Make label background transparent\n                  zIndex: 0, // Lower z-index to ensure marker is on top\n                },\n                //text: `${lastCategory && seriesData[lastCategory][1]}`,\n              },\n            }],\n          yaxis: [\n            {\n              y: 30,\n              y2: 0,\n              borderColor: \"transparent\",\n              fillColor: \"#f7caca\", // Color for 0-30 range\n            },\n            {\n              y: 60,\n              y2: 30,\n              borderColor: \"transparent\",\n              fillColor: \"#f9debe\", // Color for 30-60 range\n            },\n            {\n              y: 100,\n              y2: 60,\n              borderColor: \"transparent\",\n              fillColor: \"#cfe7d5\", // Color for 60-100 range\n            },\n          ],\n        },\n        tooltip: {\n          enabled: true,\n          x: { format: \"dd MMM yyyy\" },\n          custom: ({ series, seriesIndex, dataPointIndex, w }) => {\n\n             const seriesData = series[0][dataPointIndex]\n              return (!maxData ? \"\" : \n                seriesData<=30 ?\n                `<div class=\"apexcharts-tooltip-item bg-red\"><img src=\"https://cloud.socialwalls.com/react-app/media/icons/emoji/emoji5.svg\">` +\n                `<div><strong>Negative</strong><br/>` + `${seriesData}%` +`</div></div>`\n                  : seriesData<=60 ? \n                `<div class=\"apexcharts-tooltip-item bg-yelow\"><img src=\"https://cloud.socialwalls.com/react-app/media/icons/emoji/emoji3.svg\">` + \n                `<div><strong>Neutral</strong><br/>` + `${seriesData}%` + `</div></div>`\n                  :\n                `<div class=\"apexcharts-tooltip-item bg-green\"><img src=\"https://cloud.socialwalls.com/react-app/media/icons/emoji/emoji1.svg\">` +\n                `<div><strong>Positive</strong><br/>` + `${seriesData}%` + `</div></div>`\n              )\n          },\n        },\n        grid: {\n          show: false, // Enable or disable the entire grid (optional)\n        },\n      },\n      responsive: [\n        {\n          // breakpoint: 991,\n          options: {\n            chart: {\n              height: 300,\n            },\n          },\n          // breakpoint: 767,\n          options: {\n            chart: {\n              height: 280,\n            },\n          },\n        },\n      ],\n    };\n  }\n\n  render() {\n\n    return (\n     <> \n      <ReactApexChart\n        options={this.state.options}\n        series={this.state.series}\n        type=\"line\"\n        height={350}\n      />\n           \n     </> \n    );\n  }\n}\n","import moment from \"moment\";\nimport { Link } from \"react-router-dom\";\n\nconst FilterModeration = (props) => {\n\n  const { children, dateFilter, selectedWallFeed, link, isClass } = props  \n\n  return (\n     <Link className={`${isClass ? isClass : `mb-4 last-child-mb-0 d-block`}`} to={selectedWallFeed?.length ? `/moderation/index/${localStorage.getItem('wallId')}?${link}${dateFilter ? `/${moment(dateFilter.startDate).format(\"YYYY-MM-DD\")}` : ''}${dateFilter ? `/${moment(dateFilter.endDate).format(\"YYYY-MM-DD\")}` : ``}` : `#`}>\n        {children}\n    </Link>\n  );\n}\n\nexport default FilterModeration\n","import { Button, CardHeader, CardTitle } from \"react-bootstrap\";\nimport { baseUrl } from \"../../../../../../utils\";\n\nconst SectionHeading = (props) => {\n\n  const { title, section, cardTitleCss, icon, iconFull, selectedWallFeed, moreData, total, handlePopup, headingMargin, isDashboard,isTrial } = props\n\n  // && selectedWallFeed && Object.keys(selectedWallFeed).length\n\n  return (\n    <CardHeader className={`${section==1 ? 'p-0 border-0' : section==2 ? 'p-3' : section==3 ? 'p-0 pb-3' : 'px-3 pt-3 border-0 pb-0'}`}>\n      <CardTitle className={cardTitleCss ? cardTitleCss : `mb-0 d-flex align-items-center justify-content-between ${isDashboard ? isDashboard : \"\"}`}>\n        <h6 className={`card-label font-weight-bolder ${!headingMargin ? 'm-0' : 'm-0'} `}>\n         { icon ? <img src={baseUrl(`dashboard/analytic/${icon}.svg`)}  height={\"20px\"} width={\"20px\"} /> : null }\n         { iconFull ? <img src={iconFull}  height={\"20px\"} width={\"20px\"} />  : null }   {title}</h6>\n         { !isTrial && ((total > 5) || moreData) ? ( <Button variant=\"link\" className=\"p-0\" onClick={() => handlePopup(true)} > See More </Button> ) : null\n        }\n      </CardTitle>\n    </CardHeader>\n  );\n};\n\nexport default SectionHeading;\n","import axios from 'axios'; \nimport store from '../../../../../store';\nimport { EXPIRE_POST_UPDATE, LIVE_API, NoCameraImgPost } from '../../../../../actions/api';\nimport moment from 'moment';\nimport { GET_INSTAGRAM_IMAGE } from '../../../../../actions/analyticsAction';\n\nexport const toAbsoluteUrl = pathname => `https://cloud.tagbox.com/app/analytics` + pathname;\n\nexport const ordinal_suffix_of = (i) => {\n    var j = i % 10,\n        k = i % 100;\n    if (j == 1 && k != 11) {\n        return i + \"st\";\n    }\n    if (j == 2 && k != 12) {\n        return i + \"nd\";\n    }\n    if (j == 3 && k != 13) {\n        return i + \"rd\";\n    }\n    return i + \"th\";\n}\n\nexport const secondsToTime = (secs) => {\n    // var hours = Math.floor(secs / (60 * 60));\n    // var divisor_for_minutes = secs % (60 * 60);\n    // var minutes = Math.floor(divisor_for_minutes / 60);\n\n    // var divisor_for_seconds = divisor_for_minutes % 60;\n    // var seconds = Math.ceil(divisor_for_seconds);\n    // return `${hours}:${minutes}:${seconds}`;\n\n    var sec_num = parseInt(secs, 10); // don't forget the second param\n    var hours = Math.floor(sec_num / 3600);\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n    if (hours < 10) { hours = \"0\" + hours; }\n    if (minutes < 10) { minutes = \"0\" + minutes; }\n    if (seconds < 10) { seconds = \"0\" + seconds; }\n\n    return hours + ':' + minutes + ':' + seconds;\n\n\n}\n\nexport const getTimeTypeSecondToTime = (secs, type) => {\n    let dataTime = secondsToTime(secs);\n    let acrtualTime = dataTime.split(':')\n    if (type == 1) {\n        if (acrtualTime && acrtualTime.length) return acrtualTime[0];\n        else return 0;\n    }\n    else if (type == 2) {\n\n        if (acrtualTime && acrtualTime.length) return acrtualTime[1];\n        else return 0;\n    }\n    else if (type == 3) {\n        if (acrtualTime && acrtualTime.length) return acrtualTime[2];\n        else return 0;\n    }\n}\nexport const validURL = (str) => {\n    var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n        '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n    return !!pattern.test(str);\n}\n\nexport const convertIntToBool = (value) => {\n    if (value) return Boolean(value)\n    else return value;\n\n}\n\n\nexport const customClass = {\n    confirmButton: 'btn-primary btn-min-w btn btn-primary',\n    cancelButton: 'border-btn btn-outline-dark me-4 btn-min-w btn btn-primary',\n}\n\n\nexport const updateURLForIframe = (url) => {\n    if (url && url.includes('youtube.com')) {\n        const urlSplits = url.split('?v=');\n        if (urlSplits && urlSplits.length && urlSplits[1]) {\n            url = `https://www.youtube.com/embed/${urlSplits[1]}`;\n        }\n    }\n    else if (url && url.includes('vimeo.com')) {\n        const urlSplits = url.split('/');\n        if (urlSplits && urlSplits.length && urlSplits[urlSplits.length - 1]) {\n            url = `https://player.vimeo.com/video/${urlSplits[urlSplits.length - 1]}?autoplay=1&loop=1&autopause=0`;\n        }\n    }\n    return url;\n}\n\nexport const getSecondsFromTime = (time) => {\n    let actualTime = time.split(':');\n    let totalSeconds = (+actualTime[0]) * 60 * 60 + (+actualTime[1]) * 60 + (+actualTime[2]);\n    return totalSeconds;\n}\n\nexport const loaderCircleStyle = { padding: 1, color: '#545454', fontSize: 10 }\nexport const getPosition = (partitions, currentSceneContent) => {\n    const getPartitions = Object.keys(partitions).map((item) => ({ position: item, name: partitions[item] }))\n    const filterData = getPartitions.filter((item) => item.name == currentSceneContent.name);\n    return filterData;\n}\nexport const GET_HEIGHT_WIDTH = (cssStyle, position, layouts, mixContentType) => {\n\n    const actualLayout = layouts.filter((item) => item.id == mixContentType)\n\n    if (actualLayout && actualLayout[0]) {\n\n\n        const currentHeightWidth = GET_DYNAMIC_HEIGHT_WIDTH(cssStyle, position);\n        const actualDefault = GET_DYNAMIC_HEIGHT_WIDTH(actualLayout[0].css, position);\n        if (actualDefault && Object.keys(actualDefault).length) {\n            if (parseInt(actualDefault.height) > parseInt(actualDefault.width)) {\n                return { width: currentHeightWidth.width, height: 0, label: \"Width\" }\n            }\n            else if (parseInt(actualDefault.height) < parseInt(actualDefault.width)) {\n                return { height: currentHeightWidth.height, width: 0, label: \"Height\" }\n            }\n            else {\n                if (mixContentType == 1) {\n                    return { height: currentHeightWidth.height, width: 0, label: \"Height\" }\n                }\n                else {\n                    return { height: 0, width: 0 }\n                }\n            }\n        }\n        else {\n            return currentHeightWidth;\n        }\n    }\n}\n\nconst GET_DYNAMIC_HEIGHT_WIDTH = (cssStyle, position) => {\n    const cData = cssStyle.split(\"#zone\");\n\n    var height = \"\"; var width = \"\";\n    if (cData && cData.length) {\n        cData.map((item, index) => {\n            const trimContent = item.trim()\n            const firstValue = trimContent.charAt(0);\n            if (firstValue == position[0].position) {\n                const replaceValue = item.split(\";\")\n                if (replaceValue && replaceValue.length) {\n                    replaceValue.map((rItem) => {\n                        const getHeightWidth = rItem.split(\":\");\n                        if (getHeightWidth && getHeightWidth[0] && getHeightWidth[0] == \"height\") height = getHeightWidth[1].replace(\"%\", \"\");\n                        if (getHeightWidth && getHeightWidth[0] && getHeightWidth[0] == \"width\") width = getHeightWidth[1].replace(\"%\", \"\");\n                    })\n                }\n            }\n        })\n    }\n    return { height, width, }\n}\n\nexport const convertHMS = (timeString) => {\n    const arr = timeString.split(\":\");\n    const seconds = arr[0] * 3600 + arr[1] * 60 + (+arr[2]);\n    return seconds;\n}\n\n\n\n\nexport const getRandomArbitrary = (min, max) => {\n    return parseInt(Math.random() * (max - min) + min);\n}\n\nexport const additionArrayData = (data) => {\n    if (data && data.length > 0) {\n        return data.reduce((total, num) => total + num)\n    }\n    else return 0\n}\n\nexport const kFormatter = (value) => {\n    // return Math.abs(num) > 999 ? Math.sign(num) * ((Math.abs(num) / 1000).toFixed(1)) + 'k' : Math.sign(num) * Math.abs(num)\n\n\n    // return Math.abs(Number(num)) >= 1.0e+9 ? (Math.abs(Number(num)) / 1.0e+9).toFixed(2) + \"B\" : Math.abs(Number(num)) >= 1.0e+6 ? (Math.abs(Number(num)) / 1.0e+6).toFixed(2) + \"M\" : Math.abs(Number(num)) >= 1.0e+3 ? (Math.abs(Number(num)) / 1.0e+3).toFixed(2) + \"K\" : Math.abs(Number(num));\n    try {\n\n\n        var newValue = value;\n        if (value >= 1000) {\n            var suffixes = [\"\", \"K\", \"M\", \"B\", \"T\"];\n            var suffixNum = Math.floor((\"\" + value).length / 3);\n            var shortValue = '';\n            for (var precision = 2; precision >= 1; precision--) {\n                shortValue = parseFloat((suffixNum != 0 ? (value / Math.pow(1000, suffixNum)) : value).toPrecision(precision));\n                var dotLessShortValue = (shortValue + '').replace(/[^a-zA-Z 0-9]+/g, '');\n                if (dotLessShortValue.length <= 2) { break; }\n            }\n            if (shortValue % 1 != 0) shortValue = shortValue.toFixed(1);\n            newValue = shortValue + suffixes[suffixNum];\n        }\n        return newValue;\n    }\n    catch (ex) {\n        return Math.abs(value) > 999 ? Math.sign(value) * ((Math.abs(value) / 1000).toFixed(1)) + 'k' : Math.sign(value) * Math.abs(value)\n    }\n\n}\nexport const OverviewChartFormatting = (formattingData) => {\n    let data = [];\n    if (formattingData && formattingData.length > 0) {\n        formattingData.map((item) => {\n            data.push({\n                name: item.name,\n                type: 'line',\n                data: dataConvertToInt(item.data)\n            })\n        })\n        return data;\n    }\n    else return formattingData;\n}\n\nexport const dataConvertToInt = (formateIntData) => {\n    let updateData = [];\n    if (formateIntData && formateIntData.length > 0) {\n        formateIntData.map((item) => {\n            updateData.push(parseInt(item))\n\n        })\n        return updateData\n\n\n    }\n    else return formateIntData\n\n}\n\n\nexport const networkURLIsValid = (str) => {\n    let output = str;\n    let matches;\n    matches = str.match(/(?:https?:\\/\\/)?(?:www.)?(?:twitter|medium|facebook|vimeo|instagram|google|pinterest|flickr|youtube|linkedin|vkontakte|vk|tiktok|soundcloud|giphy|airbnb|yammer|slack|yelp|workplace|rss|tumblr)(?:.com\\/)?([@a-zA-Z0-9-_]+)/im);\n    if (matches && matches.length > 0) return true\n    else return false;\n}\n\nexport const capitalizeFirstLetter = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst UPDATE_INSTAGRAM_IMAGE_VIDEO = `https://${LIVE_API ? 'app' : 'test'}.taggbox.com/display/post/update`;\nconst NO_CAMERA_IMAGE = NoCameraImgPost;\nconst updateStatusRenewImage = (wallId, postId, table_name, e) => {\n    const { moderation, authenticated } = store.getState();\n    const { details, listData } = moderation;\n    const { userData } = authenticated;\n    const postData = listData.length > 0 ? listData.filter((val) => val.id == postId) : []\n    const url = details?.wall?.url;\n    const table = userData.UserPlan.db_table;\n    let dataFormatted = {\n        wallId: wallId,\n        postId: postId,\n        table_name: table,\n        ownerId: localStorage.getItem('ownerId'),\n        feedId: postData.length > 0 ? postData[0].feedId : '',\n        type: postData.length > 0 ? postData[0].type : '',\n        link: postData.length > 0 ? postData[0].link : '',\n        postFile: postData.length > 0 ? postData[0].postFile : '',\n        mediaFile: postData.length > 0 ? postData[0].mediaFile : '',\n        url: url\n    }\n    axios.post(EXPIRE_POST_UPDATE, dataFormatted).then(({ data }) => {\n        e.target.src = data.media;\n        e.target.attributes[\"data-load\"].value = \"1\";\n    })\n}\n\nexport const updateInstagramPostImage = (data) => {\n    const { authenticated } = store.getState();\n    const { userData } = authenticated;\n    const table = userData.UserPlan.db_table;\n\n    let dataFormatted = {\n        ...data,\n        table_name: table\n    }\n    axios.post(`${UPDATE_INSTAGRAM_IMAGE_VIDEO}`, dataFormatted)\n        .then((response) => { })\n        .catch((error) => {\n            console.error(error);\n        });\n};\n\nconst FETCH_LINK = (fetchUrl, postId, dataSrc, type) => GET_INSTAGRAM_IMAGE(fetchUrl).then((response) => {\n    let html = response.data;\n    if (html) {\n        var regex = /_sharedData = ({.*);<\\/script>/m,\n            json = JSON.parse(regex.exec(html)[1]);\n        if (typeof json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children !== 'undefined') {\n            if (type == 'video') {\n                const videoPath = json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children.edges.filter((item) => item.node.shortcode == postId[4])[0].node.video_url\n                return videoPath;\n            } else {\n                const imagePath = json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children.edges.filter((item) => item.node.shortcode == postId[4])[0].node.display_url\n                return imagePath;\n            }\n        }\n        else if (json.entry_data.PostPage[0].graphql.shortcode_media.__typename === 'GraphVideo') {\n\n            if (json.entry_data.PostPage[0].graphql.shortcode_media.is_video) {\n                return { video_url: json.entry_data.PostPage[0].graphql.shortcode_media.video_url, display_url: json.entry_data.PostPage[0].graphql.shortcode_media.display_url }\n            }\n        }\n        else {\n            return json.entry_data.PostPage[0].graphql.shortcode_media.display_url;\n        }\n    }\n\n}).catch((error) => {\n    if (dataSrc.includes(\"cdn.taggbox.com\")) return NO_CAMERA_IMAGE;\n    else return NO_CAMERA_IMAGE;\n})\n\n\nexport const IMG_LOAD_AFTER_COMPLETE_LAYOUT = async (e) => {\n    // return\n    e.persist()\n   \n    const { userData } = store.getState().authenticated;\n    const table_name = userData.UserPlan.db_table;\n    const network = e.target.getAttribute(\"data-network\")\n    const wallId = e.target.getAttribute(\"data-wall-id\");\n    const postId = e.target.getAttribute(\"data-item-id\");\n    const filterId = e.target.getAttribute(\"data-filter-id\");\n    let links = e.target.getAttribute(\"data-link\");\n    let image_update = '';\n    let video_update = '';\n    // const UserDetail = store.getState();\n    if (network) {\n        const dataSrc = e.target.src;\n        if ((network == 2 || network == 18 || network == 3 || network == 28) && (dataSrc.includes(\"cloud.taggbox.com\") || dataSrc.includes(\"cdn.taggbox.com\") || dataSrc.includes(\"cdninstagram.com\") || dataSrc.includes(\"no-camera.svg\") || dataSrc.includes(\"instagram-no-image\") || network == 3 || network == 28) && e.target.getAttribute(\"data-load\") == 0 && filterId != \"34\") {\n            if ((network == 2 || network == 18)) {\n                let postLinkId = links.split('/');\n                let fetchUrl = `https://images${~~(Math.random() * 3333)}-focus-opensocial.googleusercontent.com/gadgets/proxy?container=none&url=${links}`;\n                let IMG_URL_UPDATE = await FETCH_LINK(fetchUrl, postLinkId, dataSrc, 'image')\n                if (IMG_URL_UPDATE && IMG_URL_UPDATE != null && IMG_URL_UPDATE.length > 0 && typeof IMG_URL_UPDATE === 'string' && (IMG_URL_UPDATE.includes(\"no-camera.svg\") || IMG_URL_UPDATE.includes(\"lookaside.instagram.com\"))) {\n                    updateStatusRenewImage(wallId, postId, table_name, e)\n                }\n                else {\n                    if (IMG_URL_UPDATE && IMG_URL_UPDATE != null && IMG_URL_UPDATE.length > 0 && typeof IMG_URL_UPDATE === 'string') {\n                        e.target.src = `https://images.taggbox.com/${IMG_URL_UPDATE}`;\n                        image_update = IMG_URL_UPDATE;\n                        e.target.attributes[\"data-load\"].value = \"1\";\n                        if (IMG_URL_UPDATE.includes(\"no-camera.svg\")) {\n                            e.target.style = \"visibility:visible!important;width:180px;margin:20px auto;object-fit: contain;\";\n                        }\n                        e.target.style = \"\";\n                    }\n                    else {\n                        if (IMG_URL_UPDATE.display_url && IMG_URL_UPDATE.display_url.includes(\"lookaside.instagram.com\")) {\n                            updateStatusRenewImage(wallId, postId, table_name, e)\n                        }\n                        else {\n                            e.target.src = `https://images.taggbox.com/${IMG_URL_UPDATE.display_url}`;\n                            image_update = IMG_URL_UPDATE.display_url;\n                            video_update = IMG_URL_UPDATE.video_url;\n                            e.target.attributes[\"data-load\"].value = \"1\";\n                            if (IMG_URL_UPDATE.display_url.includes(\"no-camera.svg\")) {\n                                e.target.style = \"visibility:visible!important;width:180px;margin:20px auto;object-fit: contain;\";\n                            }\n                            e.target.style = \"\";\n                        }\n                    }\n                    if (!image_update.includes(\"no-camera.svg\") && !image_update.includes(\"cdn.taggbox.com\") && !image_update.includes(\"lookaside.instagram.com\")) {\n\n                        updateInstagramPostImage({\n                            ownerId: localStorage.getItem('ownerId'),\n                            wallId: wallId,\n                            postFile: image_update,\n                            video: video_update,\n                            type: 2,\n                            postId: postId,\n                            table_name: table_name\n                        });\n                    }\n                }\n\n            }\n            else {\n                const { details, listData } = store.getState().moderation;\n                const postData = listData.length > 0 ? listData.filter((val) => val.id == postId) : []\n                const url = details?.wall?.url;\n\n                let dataFormatted = {\n                    wallId: wallId,\n                    postId: postId,\n                    table_name: table_name,\n                    ownerId: localStorage.getItem('ownerId'),\n                    feedId: postData.length > 0 ? postData[0].feedId : '',\n                    type: postData.length > 0 ? postData[0].type : '',\n                    link: postData.length > 0 ? postData[0].link : '',\n                    postFile: postData.length > 0 ? postData[0].postFile : '',\n                    mediaFile: postData.length > 0 ? postData[0].mediaFile : '',\n                    url: url\n                }\n                axios.post(EXPIRE_POST_UPDATE, dataFormatted).then(({ data }) => {\n                    e.target.src = data.media;\n                    e.target.attributes[\"data-load\"].value = \"1\";\n\n                })\n            }\n        }\n        else {\n            if (dataSrc.includes(\"no-camera.svg\")) {\n                e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\n            }\n            else {\n                e.target.src = NO_CAMERA_IMAGE;\n                e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\n\n            }\n            e.target.attributes[\"data-load\"].value = \"1\";\n        }\n\n    }\n    else {\n        e.target.src = NO_CAMERA_IMAGE;\n        e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\n\n    }\n\n}\n\n\nexport const removeHttp = (str) => {\n    return str.split('//')[1].replace(/\\/$/, \"\").replace(/^www\\./, '')\n}\n\n\nexport const dateFormat = (date) =>{\n    return moment(date).format(\"YYYY-MM-DD HH:mm:ss\")\n}\n\n\n ","import { Card, CardBody, Form, Tab, Tabs } from \"react-bootstrap\";\nimport { toAbsoluteUrl } from \"../../utils\";\nimport SVG from \"react-inlinesvg\";\nimport React, { useState } from \"react\";\nimport { kFormatter, reArrangeSeriesSentiment } from \"../../../../../../utils\";\nimport SentimentChart from \"../../layout/common/graph/sentimentChart\";\nimport ImageSkeleton from \"../../layout/skeleton/imageSkeleton\";\nimport { useDispatch } from \"react-redux\";\nimport { getsentimentLiveTrenddateRange } from \"../../../../../../actions/analyticsAction\";\nimport FilterModeration from \"../../layout/common/filterModeration\";\nimport SectionHeading from \"../../layout/common/sectionHeading\";\nimport { togglePlanSection_D } from \"../../../../../../actions/showDisplayModalAction\";\n\nconst SentimentAnalytics = (props) => {\n\n  const { live_trend, sentimentPost, loader, dateFilter, selectedWallFeed, isUpgrade } = props\n\n  const sentimentY = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100];\n\n  const dispatch = useDispatch();\n  const [activeTab, setActiveTab] = useState(\"trends\");\n  const [activeTime, setActiveTime] = useState(0);\n\n  const initialScore = live_trend?.initiallastScore?.length\n    ? Number(live_trend.initiallastScore[0].sentiment)\n    : null;\n\n  if (initialScore) live_trend.data[0] = initialScore;\n\n  const sentimentAnalytics = live_trend ? reArrangeSeriesSentiment([live_trend], 1) : [];\n  const data = sentimentPost?.[0]?.data || [];\n\n  const SentimentsData = data.length\n    ? [\n        { post: data[0]['Strongly Positive'], type: 'Strongly Positive', icon: \"/emojis/emoji1.svg\", color: \"#25cb6b\" },\n        { post: data[0]['Positive'], type: 'Positive', icon: \"/emojis/emoji2.svg\", color: \"#50dca1\" },\n        { post: data[0]['Neutral'], type: 'Neutral', icon: \"/emojis/emoji3.svg\", color: \"#ffb143\" },\n        { post: data[0]['Negative'], type: 'Negative', icon: \"/emojis/emoji4.svg\", color: \"#ff6c7c\" },\n        { post: data[0]['Strongly Negative'], type: 'Strongly Negative', icon: \"/emojis/emoji5.svg\", color: \"#ff293a\" },\n      ]\n    : [];\n\n  const handleSelect = (e) => setActiveTab(e);\n\n  const getSentimentData = (value) => {\n    setActiveTime(value);\n    dispatch(getsentimentLiveTrenddateRange(value));\n  };\n\n  return (\n    <Card className=\"sw-card-custom gutter-b p-3 card-shadow mb-4\">\n      <SectionHeading cardTitleCss=\"p-0 border-0\" headingMargin={1} selectedWallFeed={selectedWallFeed} section={1} iconFull=\"https://socialwalls.com/wp-content/themes/socialwalls/assets/section-library/images/home/new/ai.svg\" title=\"Sentiments Analysis\" />\n      <CardBody className=\"p-0 position-relative\">\n        {activeTab === 'trends' && isUpgrade ? (\n          <div className=\"date-filter position-absolute end-0 top-0\">\n            <Form.Select value={activeTime} onChange={(e) => getSentimentData(e.target.value)} size=\"md\">\n              <option value={24}>Last 24 Hours</option>\n              <option value={48}>Last 48 Hours</option>\n            </Form.Select>\n          </div>\n        ) : null }\n\n        <Tabs activeKey={activeTab} onSelect={handleSelect} defaultActiveKey=\"trends\" id=\"uncontrolled-tab-example\" className=\"nav-tabs-line sw-custom-nav nav nav-tabs mb-3\" >\n          <Tab eventKey=\"trends\" title=\"Live Trends\">\n            <div className=\"card-body p-0 mb-0\">\n              { isUpgrade ? loader ? <div className=\"home-sentiment h-100 h-350\"><ImageSkeleton img={4} /></div> : <SentimentChart contentAnalyticsData={sentimentAnalytics} type=\"line\" /> : \n              \n              <div className=\"p-6 card-body\">\n                <div className={`not_connected_err not_connected_err_new' flex-center overlay-layer d-flex flex-column flex-center`}>\n                    <p className=\"text-dark w-70 text-center font-size-h6\"> Find out what your audience feels about the event with AI sentiment analysis. </p>\n                    <div className=\"not_conne_overlay d-flex flex-column flex-center\">\n                        <a onClick={() => dispatch(togglePlanSection_D(true))} className=\"btn btn-primary\" href=\"#\" > Upgrade Now </a>\n                    </div>\n                    \n                </div>\n              </div>\n              }\n            </div>\n          </Tab>\n          <Tab eventKey=\"statistics\" title=\"Statistics\">\n            <div className=\"card-body p-0 mb-0\">\n              <div className=\"sentiment-statistics py-4\">\n                <div className=\"d-flex\">\n                  <div className=\"col-md-3 col-2\">\n                    {SentimentsData.map((data, index) => (\n                      <div className=\"mb-4\" key={index}>\n                        <div className=\"d-flex align-items-center col-2\">\n                          <FilterModeration isClass=\"d-flex align-items-center d-block\" dateFilter={dateFilter} selectedWallFeed={selectedWallFeed} link={`sentiments=${index + 1}`} >\n                            <div className=\"svg-icon svg-icon-3x me-3\">\n                              <SVG src={toAbsoluteUrl(data.icon)} />\n                            </div>\n                            <strong className=\"text-dark d-md-block d-none text-nowrap\">{data.type}</strong>\n                          </FilterModeration>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"col-md-9 col-10\">\n                    <div className=\"position-relative d-flex flex-column h-100 justify-content-between\">\n                      <div className=\"chart-bg d-flex\"> {sentimentY.map((value, i) => ( <span key={i}>{value}</span> ))} </div>\n                      {SentimentsData.map((data, index) => {\n                        const total = SentimentsData.reduce((a, b) => a + b.post, 0);\n                        const percent = total > 0 ? ((data.post / total) * 100).toFixed(1) : 0;\n\n                        return (\n                          <div className=\"d-flex align-items-center mb-4 w-100\" key={index}>\n                            <div className=\"w-0 opacity-0 d-flex align-items-center\">\n                              <div className=\"svg-icon svg-icon-3x me-3\"> <SVG src={toAbsoluteUrl(data.icon)} /> </div>\n                            </div>\n                            <div className={`progress_sentiment progress w-100 h-auto position-relative pro_${index} ${percent > 86 ? 'progress-tooltip-over' : ''}`} style={{ background: 'none' }} >\n                              <div role=\"progressbar\" className=\"progress-bar me-3\" style={{ width: `${percent}%`, backgroundColor: data.color }} >\n                                <div className=\"progress-tooltip-box progress_label d-flex align-items-start border-0 text-dark text-start shadow\">\n                                  <SVG src={toAbsoluteUrl(data.icon)} width={20} height={20} className=\"me-2\" />\n                                  <div className=\"toolitp-content\">\n                                    <div className=\"font-size-xs\">{data.type}</div>\n                                    <strong className=\"text-dark font-size-sm\">\n                                      {kFormatter(Math.round(data.post))} Posts <text style={{ color: data.color }}>({percent}%)</text>\n                                    </strong>\n                                  </div>\n                                </div>\n                              </div>\n                              <strong className=\"font-size-sm text-dark\">{kFormatter(Math.round(data.post))} Posts ({`${percent}%`})</strong>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Tab>\n        </Tabs>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default React.memo(SentimentAnalytics);\n"],"names":["ImageSkeleton","props","_jsx","className","style","backgroundImage","baseUrl","React","SentimentChart","PureComponent","constructor","super","analyticgetData","this","contentAnalyticsData","getData","newSeries","lastCategory","Object","keys","length","seriesData","maxData","some","value","uniqueData","reduce","acc","item","getItem","Number","includes","push","state","series","options","colors","chart","id","toolbar","show","type","animations","enabled","easing","dynamicAnimation","speed","height","zoom","legend","position","itemMargin","horizontal","vertical","dataLabels","markers","size","stroke","width","curve","xaxis","min","unixDate","max","labels","formatter","moment","format","tooltip","shared","intersect","tickPlacement","yaxis","Math","round","annotations","points","x","y","marker","fillColor","strokeColor","shape","cssClass","label","borderColor","offsetY","offsetX","color","background","zIndex","y2","custom","_ref","seriesIndex","dataPointIndex","w","grid","responsive","render","_Fragment","children","ReactApexChart","dateFilter","selectedWallFeed","link","isClass","Link","to","localStorage","startDate","endDate","title","section","cardTitleCss","icon","iconFull","moreData","total","handlePopup","headingMargin","isDashboard","isTrial","CardHeader","_jsxs","CardTitle","src","Button","variant","onClick","toAbsoluteUrl","pathname","kFormatter","newValue","suffixNum","floor","shortValue","precision","parseFloat","pow","toPrecision","replace","toFixed","ex","abs","sign","dateFormat","date","SentimentAnalytics","_live_trend$initialla","_sentimentPost$","live_trend","sentimentPost","loader","isUpgrade","dispatch","useDispatch","activeTab","setActiveTab","useState","activeTime","setActiveTime","initialScore","initiallastScore","sentiment","data","sentimentAnalytics","reArrangeSeriesSentiment","SentimentsData","post","Card","SectionHeading","CardBody","Form","Select","onChange","e","getSentimentData","target","getsentimentLiveTrenddateRange","Tabs","activeKey","onSelect","defaultActiveKey","Tab","eventKey","img","togglePlanSection_D","href","map","index","FilterModeration","SVG","i","a","b","percent","role","backgroundColor"],"sourceRoot":""}